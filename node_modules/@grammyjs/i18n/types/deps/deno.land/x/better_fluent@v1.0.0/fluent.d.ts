import { FluentBundle, type FluentVariable } from "./deps.js";
import { WarningHandler } from "./warnings/warnings.js";
export declare type LocaleId = string;
export declare type TranslationContext = Record<string, FluentVariable>;
export declare type FluentBundleOptions = ConstructorParameters<typeof FluentBundle>[1];
export interface AddTranslationOptions {
    locales: LocaleId | LocaleId[];
    source?: string | string[];
    filePath?: string | string[];
    bundleOptions?: FluentBundleOptions;
    isDefault?: boolean;
}
export interface GetTranslatorOptions {
    locales: LocaleId | LocaleId[];
}
export interface FluentOptions {
    warningHandler?: WarningHandler;
}
export declare class Fluent {
    private readonly options;
    private readonly bundles;
    private defaultBundle?;
    private readonly warningHandler;
    constructor(options?: FluentOptions);
    addTranslation(options: AddTranslationOptions): Promise<void>;
    addTranslationSync(options: AddTranslationOptions): void;
    translate(localeOrLocales: LocaleId | LocaleId[], path: string, context?: TranslationContext): string;
    /**
     * Returns translation function bound to the specified locale(s).
     */
    withLocale(localeOrLocales: LocaleId | LocaleId[]): (path: string, context?: TranslationContext) => string;
    private handleSources;
    private handleSourcesSync;
    private createBundle;
    /**
     * Finds the most suitable bundles for the specified locales.
     */
    private matchBundles;
}
