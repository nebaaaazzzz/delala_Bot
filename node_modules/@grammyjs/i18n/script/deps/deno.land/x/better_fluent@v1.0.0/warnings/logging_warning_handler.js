"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoggingWarningHandler = void 0;
/**
 * A default implementation of logging warning handler
 * for Fluent. Logging function could be customized, while
 * `console.warn` is used by default.
 */
class LoggingWarningHandler {
    constructor(options = {}) {
        Object.defineProperty(this, "options", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: options
        });
        Object.defineProperty(this, "writeLog", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.writeLog = options?.logFunction ||
            console.warn;
    }
    handleWarning(warning) {
        switch (warning.type) {
            // TRANSLATE: MISSING MESSAGE
            case "translate.bundle.missing-message": {
                const { messageId, bundle } = warning;
                this.writeLog(`Translation message (${messageId}) is not found ` +
                    `for locale(s): ${bundle.locales.join(", ")}`);
                break;
            }
            // TRANSLATE: MISSING ATTRIBUTE
            case "translate.message.missing-attribute": {
                const { attributeName, messageId, bundle } = warning;
                this.writeLog(`Missing attribute (${attributeName}) from ` +
                    `message (${messageId}) for locale(s): ` +
                    bundle.locales.join(", "));
                break;
            }
            // TRANSLATE: MISSING TRANSLATION
            case "translate.missing-translation": {
                const { path, locales } = warning;
                this.writeLog(`Translation (${path}) was not found ` +
                    `for requested locale(s): ${locales.join(", ")}`);
                break;
            }
            // UNKNOWN WARNINGS
            default: {
                this.writeLog(`Unknown warning raised: ${warning.type}, ` +
                    `please tell "@moebius/fluent" library author ` +
                    `to fix this`);
                break;
            }
        }
    }
}
exports.LoggingWarningHandler = LoggingWarningHandler;
