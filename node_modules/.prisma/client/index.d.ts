
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>


/**
 * Model Session
 * 
 */
export type Session = {
  id: number
  key: string
  value: string
}

/**
 * Model User
 * 
 */
export type User = {
  telegramId: string
  telegramFirstName: string | null
  telegramLastName: string | null
  fullName: string | null
  language: Language
  phoneNumber: string | null
  userName: string | null
  createdAt: Date
  updatedAt: Date
}

/**
 * Model House
 * 
 */
export type House = {
  id: number
  subCity: string
  woredaOrSpecificPlace: string
  propertyType: string
  numberOfBedrooms: number
  numberOfBathrooms: number
  housePostType: HousePostType
  price: number
  area: string
  status: Status
  userTelegramID: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model HouseRequest
 * 
 */
export type HouseRequest = {
  id: number
  subCity: string
  propertyType: string
  numberOfBedrooms: number
  houseRequestType: HouseRequestType
  userTelegramID: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model HouseImage
 * 
 */
export type HouseImage = {
  id: number
  image: string
  houseId: number
  createdAt: Date
  updatedAt: Date
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const HousePostType: {
  RENT: 'RENT',
  SALE: 'SALE'
};

export type HousePostType = (typeof HousePostType)[keyof typeof HousePostType]


export const HouseRequestType: {
  RENT: 'RENT',
  BUY: 'BUY'
};

export type HouseRequestType = (typeof HouseRequestType)[keyof typeof HouseRequestType]


export const Language: {
  EN: 'EN',
  AM: 'AM'
};

export type Language = (typeof Language)[keyof typeof Language]


export const Status: {
  APPROVED: 'APPROVED',
  PENDING: 'PENDING',
  REJECTED: 'REJECTED'
};

export type Status = (typeof Status)[keyof typeof Status]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Sessions
 * const sessions = await prisma.session.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Sessions
   * const sessions = await prisma.session.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<GlobalReject>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.house`: Exposes CRUD operations for the **House** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Houses
    * const houses = await prisma.house.findMany()
    * ```
    */
  get house(): Prisma.HouseDelegate<GlobalReject>;

  /**
   * `prisma.houseRequest`: Exposes CRUD operations for the **HouseRequest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more HouseRequests
    * const houseRequests = await prisma.houseRequest.findMany()
    * ```
    */
  get houseRequest(): Prisma.HouseRequestDelegate<GlobalReject>;

  /**
   * `prisma.houseImage`: Exposes CRUD operations for the **HouseImage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more HouseImages
    * const houseImages = await prisma.houseImage.findMany()
    * ```
    */
  get houseImage(): Prisma.HouseImageDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.13.0
   * Query Engine version: 1e7af066ee9cb95cf3a403c78d9aab3e6b04f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Session: 'Session',
    User: 'User',
    House: 'House',
    HouseRequest: 'HouseRequest',
    HouseImage: 'HouseImage'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    houses: number
    houseRequests: number
  }

  export type UserCountOutputTypeSelect = {
    houses?: boolean
    houseRequests?: boolean
  }

  export type UserCountOutputTypeGetPayload<S extends boolean | null | undefined | UserCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UserCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UserCountOutputTypeArgs)
    ? UserCountOutputType 
    : S extends { select: any } & (UserCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
      : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type HouseCountOutputType
   */


  export type HouseCountOutputType = {
    houseImages: number
  }

  export type HouseCountOutputTypeSelect = {
    houseImages?: boolean
  }

  export type HouseCountOutputTypeGetPayload<S extends boolean | null | undefined | HouseCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? HouseCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (HouseCountOutputTypeArgs)
    ? HouseCountOutputType 
    : S extends { select: any } & (HouseCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof HouseCountOutputType ? HouseCountOutputType[P] : never
  } 
      : HouseCountOutputType




  // Custom InputTypes

  /**
   * HouseCountOutputType without action
   */
  export type HouseCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the HouseCountOutputType
     */
    select?: HouseCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Session
   */


  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _avg: SessionAvgAggregateOutputType | null
    _sum: SessionSumAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionAvgAggregateOutputType = {
    id: number | null
  }

  export type SessionSumAggregateOutputType = {
    id: number | null
  }

  export type SessionMinAggregateOutputType = {
    id: number | null
    key: string | null
    value: string | null
  }

  export type SessionMaxAggregateOutputType = {
    id: number | null
    key: string | null
    value: string | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    key: number
    value: number
    _all: number
  }


  export type SessionAvgAggregateInputType = {
    id?: true
  }

  export type SessionSumAggregateInputType = {
    id?: true
  }

  export type SessionMinAggregateInputType = {
    id?: true
    key?: true
    value?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    key?: true
    value?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    key?: true
    value?: true
    _all?: true
  }

  export type SessionAggregateArgs = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs = {
    where?: SessionWhereInput
    orderBy?: Enumerable<SessionOrderByWithAggregationInput>
    by: SessionScalarFieldEnum[]
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _avg?: SessionAvgAggregateInputType
    _sum?: SessionSumAggregateInputType
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }


  export type SessionGroupByOutputType = {
    id: number
    key: string
    value: string
    _count: SessionCountAggregateOutputType | null
    _avg: SessionAvgAggregateOutputType | null
    _sum: SessionSumAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect = {
    id?: boolean
    key?: boolean
    value?: boolean
  }


  export type SessionGetPayload<S extends boolean | null | undefined | SessionArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Session :
    S extends undefined ? never :
    S extends { include: any } & (SessionArgs | SessionFindManyArgs)
    ? Session 
    : S extends { select: any } & (SessionArgs | SessionFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof Session ? Session[P] : never
  } 
      : Session


  type SessionCountArgs = 
    Omit<SessionFindManyArgs, 'select' | 'include'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SessionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SessionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Session'> extends True ? Prisma__SessionClient<SessionGetPayload<T>> : Prisma__SessionClient<SessionGetPayload<T> | null, null>

    /**
     * Find one Session that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, SessionFindUniqueOrThrowArgs>
    ): Prisma__SessionClient<SessionGetPayload<T>>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SessionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SessionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Session'> extends True ? Prisma__SessionClient<SessionGetPayload<T>> : Prisma__SessionClient<SessionGetPayload<T> | null, null>

    /**
     * Find the first Session that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(
      args?: SelectSubset<T, SessionFindFirstOrThrowArgs>
    ): Prisma__SessionClient<SessionGetPayload<T>>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SessionFindManyArgs>(
      args?: SelectSubset<T, SessionFindManyArgs>
    ): Prisma.PrismaPromise<Array<SessionGetPayload<T>>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
    **/
    create<T extends SessionCreateArgs>(
      args: SelectSubset<T, SessionCreateArgs>
    ): Prisma__SessionClient<SessionGetPayload<T>>

    /**
     * Create many Sessions.
     *     @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     *     @example
     *     // Create many Sessions
     *     const session = await prisma.session.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SessionCreateManyArgs>(
      args?: SelectSubset<T, SessionCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
    **/
    delete<T extends SessionDeleteArgs>(
      args: SelectSubset<T, SessionDeleteArgs>
    ): Prisma__SessionClient<SessionGetPayload<T>>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SessionUpdateArgs>(
      args: SelectSubset<T, SessionUpdateArgs>
    ): Prisma__SessionClient<SessionGetPayload<T>>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SessionDeleteManyArgs>(
      args?: SelectSubset<T, SessionDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SessionUpdateManyArgs>(
      args: SelectSubset<T, SessionUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
    **/
    upsert<T extends SessionUpsertArgs>(
      args: SelectSubset<T, SessionUpsertArgs>
    ): Prisma__SessionClient<SessionGetPayload<T>>

    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SessionClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Session base type for findUnique actions
   */
  export type SessionFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUnique
   */
  export interface SessionFindUniqueArgs extends SessionFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session base type for findFirst actions
   */
  export type SessionFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: Enumerable<SessionScalarFieldEnum>
  }

  /**
   * Session findFirst
   */
  export interface SessionFindFirstArgs extends SessionFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: Enumerable<SessionScalarFieldEnum>
  }


  /**
   * Session findMany
   */
  export type SessionFindManyArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: Enumerable<SessionScalarFieldEnum>
  }


  /**
   * Session create
   */
  export type SessionCreateArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }


  /**
   * Session createMany
   */
  export type SessionCreateManyArgs = {
    /**
     * The data used to create many Sessions.
     */
    data: Enumerable<SessionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Session update
   */
  export type SessionUpdateArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
  }


  /**
   * Session upsert
   */
  export type SessionUpsertArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }


  /**
   * Session delete
   */
  export type SessionDeleteArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
  }


  /**
   * Session without action
   */
  export type SessionArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
  }



  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    telegramId: string | null
    telegramFirstName: string | null
    telegramLastName: string | null
    fullName: string | null
    language: Language | null
    phoneNumber: string | null
    userName: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    telegramId: string | null
    telegramFirstName: string | null
    telegramLastName: string | null
    fullName: string | null
    language: Language | null
    phoneNumber: string | null
    userName: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    telegramId: number
    telegramFirstName: number
    telegramLastName: number
    fullName: number
    language: number
    phoneNumber: number
    userName: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    telegramId?: true
    telegramFirstName?: true
    telegramLastName?: true
    fullName?: true
    language?: true
    phoneNumber?: true
    userName?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    telegramId?: true
    telegramFirstName?: true
    telegramLastName?: true
    fullName?: true
    language?: true
    phoneNumber?: true
    userName?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    telegramId?: true
    telegramFirstName?: true
    telegramLastName?: true
    fullName?: true
    language?: true
    phoneNumber?: true
    userName?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: UserScalarFieldEnum[]
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    telegramId: string
    telegramFirstName: string | null
    telegramLastName: string | null
    fullName: string | null
    language: Language
    phoneNumber: string | null
    userName: string | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    telegramId?: boolean
    telegramFirstName?: boolean
    telegramLastName?: boolean
    fullName?: boolean
    language?: boolean
    phoneNumber?: boolean
    userName?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    houses?: boolean | User$housesArgs
    houseRequests?: boolean | User$houseRequestsArgs
    _count?: boolean | UserCountOutputTypeArgs
  }


  export type UserInclude = {
    houses?: boolean | User$housesArgs
    houseRequests?: boolean | User$houseRequestsArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<S extends boolean | null | undefined | UserArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? User :
    S extends undefined ? never :
    S extends { include: any } & (UserArgs | UserFindManyArgs)
    ? User  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'houses' ? Array < HouseGetPayload<S['include'][P]>>  :
        P extends 'houseRequests' ? Array < HouseRequestGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (UserArgs | UserFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'houses' ? Array < HouseGetPayload<S['select'][P]>>  :
        P extends 'houseRequests' ? Array < HouseRequestGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
      : User


  type UserCountArgs = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `telegramId`
     * const userWithTelegramIdOnly = await prisma.user.findMany({ select: { telegramId: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): Prisma.PrismaPromise<Array<UserGetPayload<T>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    houses<T extends User$housesArgs= {}>(args?: Subset<T, User$housesArgs>): Prisma.PrismaPromise<Array<HouseGetPayload<T>>| Null>;

    houseRequests<T extends User$houseRequestsArgs= {}>(args?: Subset<T, User$houseRequestsArgs>): Prisma.PrismaPromise<Array<HouseRequestGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     */
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.houses
   */
  export type User$housesArgs = {
    /**
     * Select specific fields to fetch from the House
     */
    select?: HouseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseInclude | null
    where?: HouseWhereInput
    orderBy?: Enumerable<HouseOrderByWithRelationInput>
    cursor?: HouseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<HouseScalarFieldEnum>
  }


  /**
   * User.houseRequests
   */
  export type User$houseRequestsArgs = {
    /**
     * Select specific fields to fetch from the HouseRequest
     */
    select?: HouseRequestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseRequestInclude | null
    where?: HouseRequestWhereInput
    orderBy?: Enumerable<HouseRequestOrderByWithRelationInput>
    cursor?: HouseRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<HouseRequestScalarFieldEnum>
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
  }



  /**
   * Model House
   */


  export type AggregateHouse = {
    _count: HouseCountAggregateOutputType | null
    _avg: HouseAvgAggregateOutputType | null
    _sum: HouseSumAggregateOutputType | null
    _min: HouseMinAggregateOutputType | null
    _max: HouseMaxAggregateOutputType | null
  }

  export type HouseAvgAggregateOutputType = {
    id: number | null
    numberOfBedrooms: number | null
    numberOfBathrooms: number | null
    price: number | null
  }

  export type HouseSumAggregateOutputType = {
    id: number | null
    numberOfBedrooms: number | null
    numberOfBathrooms: number | null
    price: number | null
  }

  export type HouseMinAggregateOutputType = {
    id: number | null
    subCity: string | null
    woredaOrSpecificPlace: string | null
    propertyType: string | null
    numberOfBedrooms: number | null
    numberOfBathrooms: number | null
    housePostType: HousePostType | null
    price: number | null
    area: string | null
    status: Status | null
    userTelegramID: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type HouseMaxAggregateOutputType = {
    id: number | null
    subCity: string | null
    woredaOrSpecificPlace: string | null
    propertyType: string | null
    numberOfBedrooms: number | null
    numberOfBathrooms: number | null
    housePostType: HousePostType | null
    price: number | null
    area: string | null
    status: Status | null
    userTelegramID: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type HouseCountAggregateOutputType = {
    id: number
    subCity: number
    woredaOrSpecificPlace: number
    propertyType: number
    numberOfBedrooms: number
    numberOfBathrooms: number
    housePostType: number
    price: number
    area: number
    status: number
    userTelegramID: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type HouseAvgAggregateInputType = {
    id?: true
    numberOfBedrooms?: true
    numberOfBathrooms?: true
    price?: true
  }

  export type HouseSumAggregateInputType = {
    id?: true
    numberOfBedrooms?: true
    numberOfBathrooms?: true
    price?: true
  }

  export type HouseMinAggregateInputType = {
    id?: true
    subCity?: true
    woredaOrSpecificPlace?: true
    propertyType?: true
    numberOfBedrooms?: true
    numberOfBathrooms?: true
    housePostType?: true
    price?: true
    area?: true
    status?: true
    userTelegramID?: true
    createdAt?: true
    updatedAt?: true
  }

  export type HouseMaxAggregateInputType = {
    id?: true
    subCity?: true
    woredaOrSpecificPlace?: true
    propertyType?: true
    numberOfBedrooms?: true
    numberOfBathrooms?: true
    housePostType?: true
    price?: true
    area?: true
    status?: true
    userTelegramID?: true
    createdAt?: true
    updatedAt?: true
  }

  export type HouseCountAggregateInputType = {
    id?: true
    subCity?: true
    woredaOrSpecificPlace?: true
    propertyType?: true
    numberOfBedrooms?: true
    numberOfBathrooms?: true
    housePostType?: true
    price?: true
    area?: true
    status?: true
    userTelegramID?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type HouseAggregateArgs = {
    /**
     * Filter which House to aggregate.
     */
    where?: HouseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Houses to fetch.
     */
    orderBy?: Enumerable<HouseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HouseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Houses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Houses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Houses
    **/
    _count?: true | HouseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HouseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HouseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HouseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HouseMaxAggregateInputType
  }

  export type GetHouseAggregateType<T extends HouseAggregateArgs> = {
        [P in keyof T & keyof AggregateHouse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHouse[P]>
      : GetScalarType<T[P], AggregateHouse[P]>
  }




  export type HouseGroupByArgs = {
    where?: HouseWhereInput
    orderBy?: Enumerable<HouseOrderByWithAggregationInput>
    by: HouseScalarFieldEnum[]
    having?: HouseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HouseCountAggregateInputType | true
    _avg?: HouseAvgAggregateInputType
    _sum?: HouseSumAggregateInputType
    _min?: HouseMinAggregateInputType
    _max?: HouseMaxAggregateInputType
  }


  export type HouseGroupByOutputType = {
    id: number
    subCity: string
    woredaOrSpecificPlace: string
    propertyType: string
    numberOfBedrooms: number
    numberOfBathrooms: number
    housePostType: HousePostType
    price: number
    area: string
    status: Status
    userTelegramID: string
    createdAt: Date
    updatedAt: Date
    _count: HouseCountAggregateOutputType | null
    _avg: HouseAvgAggregateOutputType | null
    _sum: HouseSumAggregateOutputType | null
    _min: HouseMinAggregateOutputType | null
    _max: HouseMaxAggregateOutputType | null
  }

  type GetHouseGroupByPayload<T extends HouseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<HouseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HouseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HouseGroupByOutputType[P]>
            : GetScalarType<T[P], HouseGroupByOutputType[P]>
        }
      >
    >


  export type HouseSelect = {
    id?: boolean
    subCity?: boolean
    woredaOrSpecificPlace?: boolean
    propertyType?: boolean
    numberOfBedrooms?: boolean
    numberOfBathrooms?: boolean
    housePostType?: boolean
    price?: boolean
    area?: boolean
    status?: boolean
    userTelegramID?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    houseImages?: boolean | House$houseImagesArgs
    user?: boolean | UserArgs
    _count?: boolean | HouseCountOutputTypeArgs
  }


  export type HouseInclude = {
    houseImages?: boolean | House$houseImagesArgs
    user?: boolean | UserArgs
    _count?: boolean | HouseCountOutputTypeArgs
  }

  export type HouseGetPayload<S extends boolean | null | undefined | HouseArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? House :
    S extends undefined ? never :
    S extends { include: any } & (HouseArgs | HouseFindManyArgs)
    ? House  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'houseImages' ? Array < HouseImageGetPayload<S['include'][P]>>  :
        P extends 'user' ? UserGetPayload<S['include'][P]> :
        P extends '_count' ? HouseCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (HouseArgs | HouseFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'houseImages' ? Array < HouseImageGetPayload<S['select'][P]>>  :
        P extends 'user' ? UserGetPayload<S['select'][P]> :
        P extends '_count' ? HouseCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof House ? House[P] : never
  } 
      : House


  type HouseCountArgs = 
    Omit<HouseFindManyArgs, 'select' | 'include'> & {
      select?: HouseCountAggregateInputType | true
    }

  export interface HouseDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one House that matches the filter.
     * @param {HouseFindUniqueArgs} args - Arguments to find a House
     * @example
     * // Get one House
     * const house = await prisma.house.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends HouseFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, HouseFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'House'> extends True ? Prisma__HouseClient<HouseGetPayload<T>> : Prisma__HouseClient<HouseGetPayload<T> | null, null>

    /**
     * Find one House that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {HouseFindUniqueOrThrowArgs} args - Arguments to find a House
     * @example
     * // Get one House
     * const house = await prisma.house.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends HouseFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, HouseFindUniqueOrThrowArgs>
    ): Prisma__HouseClient<HouseGetPayload<T>>

    /**
     * Find the first House that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseFindFirstArgs} args - Arguments to find a House
     * @example
     * // Get one House
     * const house = await prisma.house.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends HouseFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, HouseFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'House'> extends True ? Prisma__HouseClient<HouseGetPayload<T>> : Prisma__HouseClient<HouseGetPayload<T> | null, null>

    /**
     * Find the first House that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseFindFirstOrThrowArgs} args - Arguments to find a House
     * @example
     * // Get one House
     * const house = await prisma.house.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends HouseFindFirstOrThrowArgs>(
      args?: SelectSubset<T, HouseFindFirstOrThrowArgs>
    ): Prisma__HouseClient<HouseGetPayload<T>>

    /**
     * Find zero or more Houses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Houses
     * const houses = await prisma.house.findMany()
     * 
     * // Get first 10 Houses
     * const houses = await prisma.house.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const houseWithIdOnly = await prisma.house.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends HouseFindManyArgs>(
      args?: SelectSubset<T, HouseFindManyArgs>
    ): Prisma.PrismaPromise<Array<HouseGetPayload<T>>>

    /**
     * Create a House.
     * @param {HouseCreateArgs} args - Arguments to create a House.
     * @example
     * // Create one House
     * const House = await prisma.house.create({
     *   data: {
     *     // ... data to create a House
     *   }
     * })
     * 
    **/
    create<T extends HouseCreateArgs>(
      args: SelectSubset<T, HouseCreateArgs>
    ): Prisma__HouseClient<HouseGetPayload<T>>

    /**
     * Create many Houses.
     *     @param {HouseCreateManyArgs} args - Arguments to create many Houses.
     *     @example
     *     // Create many Houses
     *     const house = await prisma.house.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends HouseCreateManyArgs>(
      args?: SelectSubset<T, HouseCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a House.
     * @param {HouseDeleteArgs} args - Arguments to delete one House.
     * @example
     * // Delete one House
     * const House = await prisma.house.delete({
     *   where: {
     *     // ... filter to delete one House
     *   }
     * })
     * 
    **/
    delete<T extends HouseDeleteArgs>(
      args: SelectSubset<T, HouseDeleteArgs>
    ): Prisma__HouseClient<HouseGetPayload<T>>

    /**
     * Update one House.
     * @param {HouseUpdateArgs} args - Arguments to update one House.
     * @example
     * // Update one House
     * const house = await prisma.house.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends HouseUpdateArgs>(
      args: SelectSubset<T, HouseUpdateArgs>
    ): Prisma__HouseClient<HouseGetPayload<T>>

    /**
     * Delete zero or more Houses.
     * @param {HouseDeleteManyArgs} args - Arguments to filter Houses to delete.
     * @example
     * // Delete a few Houses
     * const { count } = await prisma.house.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends HouseDeleteManyArgs>(
      args?: SelectSubset<T, HouseDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Houses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Houses
     * const house = await prisma.house.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends HouseUpdateManyArgs>(
      args: SelectSubset<T, HouseUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one House.
     * @param {HouseUpsertArgs} args - Arguments to update or create a House.
     * @example
     * // Update or create a House
     * const house = await prisma.house.upsert({
     *   create: {
     *     // ... data to create a House
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the House we want to update
     *   }
     * })
    **/
    upsert<T extends HouseUpsertArgs>(
      args: SelectSubset<T, HouseUpsertArgs>
    ): Prisma__HouseClient<HouseGetPayload<T>>

    /**
     * Count the number of Houses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseCountArgs} args - Arguments to filter Houses to count.
     * @example
     * // Count the number of Houses
     * const count = await prisma.house.count({
     *   where: {
     *     // ... the filter for the Houses we want to count
     *   }
     * })
    **/
    count<T extends HouseCountArgs>(
      args?: Subset<T, HouseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HouseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a House.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HouseAggregateArgs>(args: Subset<T, HouseAggregateArgs>): Prisma.PrismaPromise<GetHouseAggregateType<T>>

    /**
     * Group by House.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HouseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HouseGroupByArgs['orderBy'] }
        : { orderBy?: HouseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HouseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHouseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for House.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__HouseClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    houseImages<T extends House$houseImagesArgs= {}>(args?: Subset<T, House$houseImagesArgs>): Prisma.PrismaPromise<Array<HouseImageGetPayload<T>>| Null>;

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * House base type for findUnique actions
   */
  export type HouseFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the House
     */
    select?: HouseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseInclude | null
    /**
     * Filter, which House to fetch.
     */
    where: HouseWhereUniqueInput
  }

  /**
   * House findUnique
   */
  export interface HouseFindUniqueArgs extends HouseFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * House findUniqueOrThrow
   */
  export type HouseFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the House
     */
    select?: HouseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseInclude | null
    /**
     * Filter, which House to fetch.
     */
    where: HouseWhereUniqueInput
  }


  /**
   * House base type for findFirst actions
   */
  export type HouseFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the House
     */
    select?: HouseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseInclude | null
    /**
     * Filter, which House to fetch.
     */
    where?: HouseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Houses to fetch.
     */
    orderBy?: Enumerable<HouseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Houses.
     */
    cursor?: HouseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Houses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Houses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Houses.
     */
    distinct?: Enumerable<HouseScalarFieldEnum>
  }

  /**
   * House findFirst
   */
  export interface HouseFindFirstArgs extends HouseFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * House findFirstOrThrow
   */
  export type HouseFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the House
     */
    select?: HouseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseInclude | null
    /**
     * Filter, which House to fetch.
     */
    where?: HouseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Houses to fetch.
     */
    orderBy?: Enumerable<HouseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Houses.
     */
    cursor?: HouseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Houses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Houses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Houses.
     */
    distinct?: Enumerable<HouseScalarFieldEnum>
  }


  /**
   * House findMany
   */
  export type HouseFindManyArgs = {
    /**
     * Select specific fields to fetch from the House
     */
    select?: HouseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseInclude | null
    /**
     * Filter, which Houses to fetch.
     */
    where?: HouseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Houses to fetch.
     */
    orderBy?: Enumerable<HouseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Houses.
     */
    cursor?: HouseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Houses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Houses.
     */
    skip?: number
    distinct?: Enumerable<HouseScalarFieldEnum>
  }


  /**
   * House create
   */
  export type HouseCreateArgs = {
    /**
     * Select specific fields to fetch from the House
     */
    select?: HouseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseInclude | null
    /**
     * The data needed to create a House.
     */
    data: XOR<HouseCreateInput, HouseUncheckedCreateInput>
  }


  /**
   * House createMany
   */
  export type HouseCreateManyArgs = {
    /**
     * The data used to create many Houses.
     */
    data: Enumerable<HouseCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * House update
   */
  export type HouseUpdateArgs = {
    /**
     * Select specific fields to fetch from the House
     */
    select?: HouseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseInclude | null
    /**
     * The data needed to update a House.
     */
    data: XOR<HouseUpdateInput, HouseUncheckedUpdateInput>
    /**
     * Choose, which House to update.
     */
    where: HouseWhereUniqueInput
  }


  /**
   * House updateMany
   */
  export type HouseUpdateManyArgs = {
    /**
     * The data used to update Houses.
     */
    data: XOR<HouseUpdateManyMutationInput, HouseUncheckedUpdateManyInput>
    /**
     * Filter which Houses to update
     */
    where?: HouseWhereInput
  }


  /**
   * House upsert
   */
  export type HouseUpsertArgs = {
    /**
     * Select specific fields to fetch from the House
     */
    select?: HouseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseInclude | null
    /**
     * The filter to search for the House to update in case it exists.
     */
    where: HouseWhereUniqueInput
    /**
     * In case the House found by the `where` argument doesn't exist, create a new House with this data.
     */
    create: XOR<HouseCreateInput, HouseUncheckedCreateInput>
    /**
     * In case the House was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HouseUpdateInput, HouseUncheckedUpdateInput>
  }


  /**
   * House delete
   */
  export type HouseDeleteArgs = {
    /**
     * Select specific fields to fetch from the House
     */
    select?: HouseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseInclude | null
    /**
     * Filter which House to delete.
     */
    where: HouseWhereUniqueInput
  }


  /**
   * House deleteMany
   */
  export type HouseDeleteManyArgs = {
    /**
     * Filter which Houses to delete
     */
    where?: HouseWhereInput
  }


  /**
   * House.houseImages
   */
  export type House$houseImagesArgs = {
    /**
     * Select specific fields to fetch from the HouseImage
     */
    select?: HouseImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseImageInclude | null
    where?: HouseImageWhereInput
    orderBy?: Enumerable<HouseImageOrderByWithRelationInput>
    cursor?: HouseImageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<HouseImageScalarFieldEnum>
  }


  /**
   * House without action
   */
  export type HouseArgs = {
    /**
     * Select specific fields to fetch from the House
     */
    select?: HouseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseInclude | null
  }



  /**
   * Model HouseRequest
   */


  export type AggregateHouseRequest = {
    _count: HouseRequestCountAggregateOutputType | null
    _avg: HouseRequestAvgAggregateOutputType | null
    _sum: HouseRequestSumAggregateOutputType | null
    _min: HouseRequestMinAggregateOutputType | null
    _max: HouseRequestMaxAggregateOutputType | null
  }

  export type HouseRequestAvgAggregateOutputType = {
    id: number | null
    numberOfBedrooms: number | null
  }

  export type HouseRequestSumAggregateOutputType = {
    id: number | null
    numberOfBedrooms: number | null
  }

  export type HouseRequestMinAggregateOutputType = {
    id: number | null
    subCity: string | null
    propertyType: string | null
    numberOfBedrooms: number | null
    houseRequestType: HouseRequestType | null
    userTelegramID: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type HouseRequestMaxAggregateOutputType = {
    id: number | null
    subCity: string | null
    propertyType: string | null
    numberOfBedrooms: number | null
    houseRequestType: HouseRequestType | null
    userTelegramID: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type HouseRequestCountAggregateOutputType = {
    id: number
    subCity: number
    propertyType: number
    numberOfBedrooms: number
    houseRequestType: number
    userTelegramID: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type HouseRequestAvgAggregateInputType = {
    id?: true
    numberOfBedrooms?: true
  }

  export type HouseRequestSumAggregateInputType = {
    id?: true
    numberOfBedrooms?: true
  }

  export type HouseRequestMinAggregateInputType = {
    id?: true
    subCity?: true
    propertyType?: true
    numberOfBedrooms?: true
    houseRequestType?: true
    userTelegramID?: true
    createdAt?: true
    updatedAt?: true
  }

  export type HouseRequestMaxAggregateInputType = {
    id?: true
    subCity?: true
    propertyType?: true
    numberOfBedrooms?: true
    houseRequestType?: true
    userTelegramID?: true
    createdAt?: true
    updatedAt?: true
  }

  export type HouseRequestCountAggregateInputType = {
    id?: true
    subCity?: true
    propertyType?: true
    numberOfBedrooms?: true
    houseRequestType?: true
    userTelegramID?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type HouseRequestAggregateArgs = {
    /**
     * Filter which HouseRequest to aggregate.
     */
    where?: HouseRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HouseRequests to fetch.
     */
    orderBy?: Enumerable<HouseRequestOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HouseRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HouseRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HouseRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned HouseRequests
    **/
    _count?: true | HouseRequestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HouseRequestAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HouseRequestSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HouseRequestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HouseRequestMaxAggregateInputType
  }

  export type GetHouseRequestAggregateType<T extends HouseRequestAggregateArgs> = {
        [P in keyof T & keyof AggregateHouseRequest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHouseRequest[P]>
      : GetScalarType<T[P], AggregateHouseRequest[P]>
  }




  export type HouseRequestGroupByArgs = {
    where?: HouseRequestWhereInput
    orderBy?: Enumerable<HouseRequestOrderByWithAggregationInput>
    by: HouseRequestScalarFieldEnum[]
    having?: HouseRequestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HouseRequestCountAggregateInputType | true
    _avg?: HouseRequestAvgAggregateInputType
    _sum?: HouseRequestSumAggregateInputType
    _min?: HouseRequestMinAggregateInputType
    _max?: HouseRequestMaxAggregateInputType
  }


  export type HouseRequestGroupByOutputType = {
    id: number
    subCity: string
    propertyType: string
    numberOfBedrooms: number
    houseRequestType: HouseRequestType
    userTelegramID: string
    createdAt: Date
    updatedAt: Date
    _count: HouseRequestCountAggregateOutputType | null
    _avg: HouseRequestAvgAggregateOutputType | null
    _sum: HouseRequestSumAggregateOutputType | null
    _min: HouseRequestMinAggregateOutputType | null
    _max: HouseRequestMaxAggregateOutputType | null
  }

  type GetHouseRequestGroupByPayload<T extends HouseRequestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<HouseRequestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HouseRequestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HouseRequestGroupByOutputType[P]>
            : GetScalarType<T[P], HouseRequestGroupByOutputType[P]>
        }
      >
    >


  export type HouseRequestSelect = {
    id?: boolean
    subCity?: boolean
    propertyType?: boolean
    numberOfBedrooms?: boolean
    houseRequestType?: boolean
    userTelegramID?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserArgs
  }


  export type HouseRequestInclude = {
    user?: boolean | UserArgs
  }

  export type HouseRequestGetPayload<S extends boolean | null | undefined | HouseRequestArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? HouseRequest :
    S extends undefined ? never :
    S extends { include: any } & (HouseRequestArgs | HouseRequestFindManyArgs)
    ? HouseRequest  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (HouseRequestArgs | HouseRequestFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :  P extends keyof HouseRequest ? HouseRequest[P] : never
  } 
      : HouseRequest


  type HouseRequestCountArgs = 
    Omit<HouseRequestFindManyArgs, 'select' | 'include'> & {
      select?: HouseRequestCountAggregateInputType | true
    }

  export interface HouseRequestDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one HouseRequest that matches the filter.
     * @param {HouseRequestFindUniqueArgs} args - Arguments to find a HouseRequest
     * @example
     * // Get one HouseRequest
     * const houseRequest = await prisma.houseRequest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends HouseRequestFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, HouseRequestFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'HouseRequest'> extends True ? Prisma__HouseRequestClient<HouseRequestGetPayload<T>> : Prisma__HouseRequestClient<HouseRequestGetPayload<T> | null, null>

    /**
     * Find one HouseRequest that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {HouseRequestFindUniqueOrThrowArgs} args - Arguments to find a HouseRequest
     * @example
     * // Get one HouseRequest
     * const houseRequest = await prisma.houseRequest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends HouseRequestFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, HouseRequestFindUniqueOrThrowArgs>
    ): Prisma__HouseRequestClient<HouseRequestGetPayload<T>>

    /**
     * Find the first HouseRequest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseRequestFindFirstArgs} args - Arguments to find a HouseRequest
     * @example
     * // Get one HouseRequest
     * const houseRequest = await prisma.houseRequest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends HouseRequestFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, HouseRequestFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'HouseRequest'> extends True ? Prisma__HouseRequestClient<HouseRequestGetPayload<T>> : Prisma__HouseRequestClient<HouseRequestGetPayload<T> | null, null>

    /**
     * Find the first HouseRequest that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseRequestFindFirstOrThrowArgs} args - Arguments to find a HouseRequest
     * @example
     * // Get one HouseRequest
     * const houseRequest = await prisma.houseRequest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends HouseRequestFindFirstOrThrowArgs>(
      args?: SelectSubset<T, HouseRequestFindFirstOrThrowArgs>
    ): Prisma__HouseRequestClient<HouseRequestGetPayload<T>>

    /**
     * Find zero or more HouseRequests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseRequestFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all HouseRequests
     * const houseRequests = await prisma.houseRequest.findMany()
     * 
     * // Get first 10 HouseRequests
     * const houseRequests = await prisma.houseRequest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const houseRequestWithIdOnly = await prisma.houseRequest.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends HouseRequestFindManyArgs>(
      args?: SelectSubset<T, HouseRequestFindManyArgs>
    ): Prisma.PrismaPromise<Array<HouseRequestGetPayload<T>>>

    /**
     * Create a HouseRequest.
     * @param {HouseRequestCreateArgs} args - Arguments to create a HouseRequest.
     * @example
     * // Create one HouseRequest
     * const HouseRequest = await prisma.houseRequest.create({
     *   data: {
     *     // ... data to create a HouseRequest
     *   }
     * })
     * 
    **/
    create<T extends HouseRequestCreateArgs>(
      args: SelectSubset<T, HouseRequestCreateArgs>
    ): Prisma__HouseRequestClient<HouseRequestGetPayload<T>>

    /**
     * Create many HouseRequests.
     *     @param {HouseRequestCreateManyArgs} args - Arguments to create many HouseRequests.
     *     @example
     *     // Create many HouseRequests
     *     const houseRequest = await prisma.houseRequest.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends HouseRequestCreateManyArgs>(
      args?: SelectSubset<T, HouseRequestCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a HouseRequest.
     * @param {HouseRequestDeleteArgs} args - Arguments to delete one HouseRequest.
     * @example
     * // Delete one HouseRequest
     * const HouseRequest = await prisma.houseRequest.delete({
     *   where: {
     *     // ... filter to delete one HouseRequest
     *   }
     * })
     * 
    **/
    delete<T extends HouseRequestDeleteArgs>(
      args: SelectSubset<T, HouseRequestDeleteArgs>
    ): Prisma__HouseRequestClient<HouseRequestGetPayload<T>>

    /**
     * Update one HouseRequest.
     * @param {HouseRequestUpdateArgs} args - Arguments to update one HouseRequest.
     * @example
     * // Update one HouseRequest
     * const houseRequest = await prisma.houseRequest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends HouseRequestUpdateArgs>(
      args: SelectSubset<T, HouseRequestUpdateArgs>
    ): Prisma__HouseRequestClient<HouseRequestGetPayload<T>>

    /**
     * Delete zero or more HouseRequests.
     * @param {HouseRequestDeleteManyArgs} args - Arguments to filter HouseRequests to delete.
     * @example
     * // Delete a few HouseRequests
     * const { count } = await prisma.houseRequest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends HouseRequestDeleteManyArgs>(
      args?: SelectSubset<T, HouseRequestDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HouseRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseRequestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many HouseRequests
     * const houseRequest = await prisma.houseRequest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends HouseRequestUpdateManyArgs>(
      args: SelectSubset<T, HouseRequestUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one HouseRequest.
     * @param {HouseRequestUpsertArgs} args - Arguments to update or create a HouseRequest.
     * @example
     * // Update or create a HouseRequest
     * const houseRequest = await prisma.houseRequest.upsert({
     *   create: {
     *     // ... data to create a HouseRequest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the HouseRequest we want to update
     *   }
     * })
    **/
    upsert<T extends HouseRequestUpsertArgs>(
      args: SelectSubset<T, HouseRequestUpsertArgs>
    ): Prisma__HouseRequestClient<HouseRequestGetPayload<T>>

    /**
     * Count the number of HouseRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseRequestCountArgs} args - Arguments to filter HouseRequests to count.
     * @example
     * // Count the number of HouseRequests
     * const count = await prisma.houseRequest.count({
     *   where: {
     *     // ... the filter for the HouseRequests we want to count
     *   }
     * })
    **/
    count<T extends HouseRequestCountArgs>(
      args?: Subset<T, HouseRequestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HouseRequestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a HouseRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseRequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HouseRequestAggregateArgs>(args: Subset<T, HouseRequestAggregateArgs>): Prisma.PrismaPromise<GetHouseRequestAggregateType<T>>

    /**
     * Group by HouseRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseRequestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HouseRequestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HouseRequestGroupByArgs['orderBy'] }
        : { orderBy?: HouseRequestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HouseRequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHouseRequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for HouseRequest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__HouseRequestClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * HouseRequest base type for findUnique actions
   */
  export type HouseRequestFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the HouseRequest
     */
    select?: HouseRequestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseRequestInclude | null
    /**
     * Filter, which HouseRequest to fetch.
     */
    where: HouseRequestWhereUniqueInput
  }

  /**
   * HouseRequest findUnique
   */
  export interface HouseRequestFindUniqueArgs extends HouseRequestFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * HouseRequest findUniqueOrThrow
   */
  export type HouseRequestFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the HouseRequest
     */
    select?: HouseRequestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseRequestInclude | null
    /**
     * Filter, which HouseRequest to fetch.
     */
    where: HouseRequestWhereUniqueInput
  }


  /**
   * HouseRequest base type for findFirst actions
   */
  export type HouseRequestFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the HouseRequest
     */
    select?: HouseRequestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseRequestInclude | null
    /**
     * Filter, which HouseRequest to fetch.
     */
    where?: HouseRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HouseRequests to fetch.
     */
    orderBy?: Enumerable<HouseRequestOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HouseRequests.
     */
    cursor?: HouseRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HouseRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HouseRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HouseRequests.
     */
    distinct?: Enumerable<HouseRequestScalarFieldEnum>
  }

  /**
   * HouseRequest findFirst
   */
  export interface HouseRequestFindFirstArgs extends HouseRequestFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * HouseRequest findFirstOrThrow
   */
  export type HouseRequestFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the HouseRequest
     */
    select?: HouseRequestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseRequestInclude | null
    /**
     * Filter, which HouseRequest to fetch.
     */
    where?: HouseRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HouseRequests to fetch.
     */
    orderBy?: Enumerable<HouseRequestOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HouseRequests.
     */
    cursor?: HouseRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HouseRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HouseRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HouseRequests.
     */
    distinct?: Enumerable<HouseRequestScalarFieldEnum>
  }


  /**
   * HouseRequest findMany
   */
  export type HouseRequestFindManyArgs = {
    /**
     * Select specific fields to fetch from the HouseRequest
     */
    select?: HouseRequestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseRequestInclude | null
    /**
     * Filter, which HouseRequests to fetch.
     */
    where?: HouseRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HouseRequests to fetch.
     */
    orderBy?: Enumerable<HouseRequestOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing HouseRequests.
     */
    cursor?: HouseRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HouseRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HouseRequests.
     */
    skip?: number
    distinct?: Enumerable<HouseRequestScalarFieldEnum>
  }


  /**
   * HouseRequest create
   */
  export type HouseRequestCreateArgs = {
    /**
     * Select specific fields to fetch from the HouseRequest
     */
    select?: HouseRequestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseRequestInclude | null
    /**
     * The data needed to create a HouseRequest.
     */
    data: XOR<HouseRequestCreateInput, HouseRequestUncheckedCreateInput>
  }


  /**
   * HouseRequest createMany
   */
  export type HouseRequestCreateManyArgs = {
    /**
     * The data used to create many HouseRequests.
     */
    data: Enumerable<HouseRequestCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * HouseRequest update
   */
  export type HouseRequestUpdateArgs = {
    /**
     * Select specific fields to fetch from the HouseRequest
     */
    select?: HouseRequestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseRequestInclude | null
    /**
     * The data needed to update a HouseRequest.
     */
    data: XOR<HouseRequestUpdateInput, HouseRequestUncheckedUpdateInput>
    /**
     * Choose, which HouseRequest to update.
     */
    where: HouseRequestWhereUniqueInput
  }


  /**
   * HouseRequest updateMany
   */
  export type HouseRequestUpdateManyArgs = {
    /**
     * The data used to update HouseRequests.
     */
    data: XOR<HouseRequestUpdateManyMutationInput, HouseRequestUncheckedUpdateManyInput>
    /**
     * Filter which HouseRequests to update
     */
    where?: HouseRequestWhereInput
  }


  /**
   * HouseRequest upsert
   */
  export type HouseRequestUpsertArgs = {
    /**
     * Select specific fields to fetch from the HouseRequest
     */
    select?: HouseRequestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseRequestInclude | null
    /**
     * The filter to search for the HouseRequest to update in case it exists.
     */
    where: HouseRequestWhereUniqueInput
    /**
     * In case the HouseRequest found by the `where` argument doesn't exist, create a new HouseRequest with this data.
     */
    create: XOR<HouseRequestCreateInput, HouseRequestUncheckedCreateInput>
    /**
     * In case the HouseRequest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HouseRequestUpdateInput, HouseRequestUncheckedUpdateInput>
  }


  /**
   * HouseRequest delete
   */
  export type HouseRequestDeleteArgs = {
    /**
     * Select specific fields to fetch from the HouseRequest
     */
    select?: HouseRequestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseRequestInclude | null
    /**
     * Filter which HouseRequest to delete.
     */
    where: HouseRequestWhereUniqueInput
  }


  /**
   * HouseRequest deleteMany
   */
  export type HouseRequestDeleteManyArgs = {
    /**
     * Filter which HouseRequests to delete
     */
    where?: HouseRequestWhereInput
  }


  /**
   * HouseRequest without action
   */
  export type HouseRequestArgs = {
    /**
     * Select specific fields to fetch from the HouseRequest
     */
    select?: HouseRequestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseRequestInclude | null
  }



  /**
   * Model HouseImage
   */


  export type AggregateHouseImage = {
    _count: HouseImageCountAggregateOutputType | null
    _avg: HouseImageAvgAggregateOutputType | null
    _sum: HouseImageSumAggregateOutputType | null
    _min: HouseImageMinAggregateOutputType | null
    _max: HouseImageMaxAggregateOutputType | null
  }

  export type HouseImageAvgAggregateOutputType = {
    id: number | null
    houseId: number | null
  }

  export type HouseImageSumAggregateOutputType = {
    id: number | null
    houseId: number | null
  }

  export type HouseImageMinAggregateOutputType = {
    id: number | null
    image: string | null
    houseId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type HouseImageMaxAggregateOutputType = {
    id: number | null
    image: string | null
    houseId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type HouseImageCountAggregateOutputType = {
    id: number
    image: number
    houseId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type HouseImageAvgAggregateInputType = {
    id?: true
    houseId?: true
  }

  export type HouseImageSumAggregateInputType = {
    id?: true
    houseId?: true
  }

  export type HouseImageMinAggregateInputType = {
    id?: true
    image?: true
    houseId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type HouseImageMaxAggregateInputType = {
    id?: true
    image?: true
    houseId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type HouseImageCountAggregateInputType = {
    id?: true
    image?: true
    houseId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type HouseImageAggregateArgs = {
    /**
     * Filter which HouseImage to aggregate.
     */
    where?: HouseImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HouseImages to fetch.
     */
    orderBy?: Enumerable<HouseImageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HouseImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HouseImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HouseImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned HouseImages
    **/
    _count?: true | HouseImageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HouseImageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HouseImageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HouseImageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HouseImageMaxAggregateInputType
  }

  export type GetHouseImageAggregateType<T extends HouseImageAggregateArgs> = {
        [P in keyof T & keyof AggregateHouseImage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHouseImage[P]>
      : GetScalarType<T[P], AggregateHouseImage[P]>
  }




  export type HouseImageGroupByArgs = {
    where?: HouseImageWhereInput
    orderBy?: Enumerable<HouseImageOrderByWithAggregationInput>
    by: HouseImageScalarFieldEnum[]
    having?: HouseImageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HouseImageCountAggregateInputType | true
    _avg?: HouseImageAvgAggregateInputType
    _sum?: HouseImageSumAggregateInputType
    _min?: HouseImageMinAggregateInputType
    _max?: HouseImageMaxAggregateInputType
  }


  export type HouseImageGroupByOutputType = {
    id: number
    image: string
    houseId: number
    createdAt: Date
    updatedAt: Date
    _count: HouseImageCountAggregateOutputType | null
    _avg: HouseImageAvgAggregateOutputType | null
    _sum: HouseImageSumAggregateOutputType | null
    _min: HouseImageMinAggregateOutputType | null
    _max: HouseImageMaxAggregateOutputType | null
  }

  type GetHouseImageGroupByPayload<T extends HouseImageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<HouseImageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HouseImageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HouseImageGroupByOutputType[P]>
            : GetScalarType<T[P], HouseImageGroupByOutputType[P]>
        }
      >
    >


  export type HouseImageSelect = {
    id?: boolean
    image?: boolean
    houseId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    house?: boolean | HouseArgs
  }


  export type HouseImageInclude = {
    house?: boolean | HouseArgs
  }

  export type HouseImageGetPayload<S extends boolean | null | undefined | HouseImageArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? HouseImage :
    S extends undefined ? never :
    S extends { include: any } & (HouseImageArgs | HouseImageFindManyArgs)
    ? HouseImage  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'house' ? HouseGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (HouseImageArgs | HouseImageFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'house' ? HouseGetPayload<S['select'][P]> :  P extends keyof HouseImage ? HouseImage[P] : never
  } 
      : HouseImage


  type HouseImageCountArgs = 
    Omit<HouseImageFindManyArgs, 'select' | 'include'> & {
      select?: HouseImageCountAggregateInputType | true
    }

  export interface HouseImageDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one HouseImage that matches the filter.
     * @param {HouseImageFindUniqueArgs} args - Arguments to find a HouseImage
     * @example
     * // Get one HouseImage
     * const houseImage = await prisma.houseImage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends HouseImageFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, HouseImageFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'HouseImage'> extends True ? Prisma__HouseImageClient<HouseImageGetPayload<T>> : Prisma__HouseImageClient<HouseImageGetPayload<T> | null, null>

    /**
     * Find one HouseImage that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {HouseImageFindUniqueOrThrowArgs} args - Arguments to find a HouseImage
     * @example
     * // Get one HouseImage
     * const houseImage = await prisma.houseImage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends HouseImageFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, HouseImageFindUniqueOrThrowArgs>
    ): Prisma__HouseImageClient<HouseImageGetPayload<T>>

    /**
     * Find the first HouseImage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseImageFindFirstArgs} args - Arguments to find a HouseImage
     * @example
     * // Get one HouseImage
     * const houseImage = await prisma.houseImage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends HouseImageFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, HouseImageFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'HouseImage'> extends True ? Prisma__HouseImageClient<HouseImageGetPayload<T>> : Prisma__HouseImageClient<HouseImageGetPayload<T> | null, null>

    /**
     * Find the first HouseImage that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseImageFindFirstOrThrowArgs} args - Arguments to find a HouseImage
     * @example
     * // Get one HouseImage
     * const houseImage = await prisma.houseImage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends HouseImageFindFirstOrThrowArgs>(
      args?: SelectSubset<T, HouseImageFindFirstOrThrowArgs>
    ): Prisma__HouseImageClient<HouseImageGetPayload<T>>

    /**
     * Find zero or more HouseImages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseImageFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all HouseImages
     * const houseImages = await prisma.houseImage.findMany()
     * 
     * // Get first 10 HouseImages
     * const houseImages = await prisma.houseImage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const houseImageWithIdOnly = await prisma.houseImage.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends HouseImageFindManyArgs>(
      args?: SelectSubset<T, HouseImageFindManyArgs>
    ): Prisma.PrismaPromise<Array<HouseImageGetPayload<T>>>

    /**
     * Create a HouseImage.
     * @param {HouseImageCreateArgs} args - Arguments to create a HouseImage.
     * @example
     * // Create one HouseImage
     * const HouseImage = await prisma.houseImage.create({
     *   data: {
     *     // ... data to create a HouseImage
     *   }
     * })
     * 
    **/
    create<T extends HouseImageCreateArgs>(
      args: SelectSubset<T, HouseImageCreateArgs>
    ): Prisma__HouseImageClient<HouseImageGetPayload<T>>

    /**
     * Create many HouseImages.
     *     @param {HouseImageCreateManyArgs} args - Arguments to create many HouseImages.
     *     @example
     *     // Create many HouseImages
     *     const houseImage = await prisma.houseImage.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends HouseImageCreateManyArgs>(
      args?: SelectSubset<T, HouseImageCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a HouseImage.
     * @param {HouseImageDeleteArgs} args - Arguments to delete one HouseImage.
     * @example
     * // Delete one HouseImage
     * const HouseImage = await prisma.houseImage.delete({
     *   where: {
     *     // ... filter to delete one HouseImage
     *   }
     * })
     * 
    **/
    delete<T extends HouseImageDeleteArgs>(
      args: SelectSubset<T, HouseImageDeleteArgs>
    ): Prisma__HouseImageClient<HouseImageGetPayload<T>>

    /**
     * Update one HouseImage.
     * @param {HouseImageUpdateArgs} args - Arguments to update one HouseImage.
     * @example
     * // Update one HouseImage
     * const houseImage = await prisma.houseImage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends HouseImageUpdateArgs>(
      args: SelectSubset<T, HouseImageUpdateArgs>
    ): Prisma__HouseImageClient<HouseImageGetPayload<T>>

    /**
     * Delete zero or more HouseImages.
     * @param {HouseImageDeleteManyArgs} args - Arguments to filter HouseImages to delete.
     * @example
     * // Delete a few HouseImages
     * const { count } = await prisma.houseImage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends HouseImageDeleteManyArgs>(
      args?: SelectSubset<T, HouseImageDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HouseImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseImageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many HouseImages
     * const houseImage = await prisma.houseImage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends HouseImageUpdateManyArgs>(
      args: SelectSubset<T, HouseImageUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one HouseImage.
     * @param {HouseImageUpsertArgs} args - Arguments to update or create a HouseImage.
     * @example
     * // Update or create a HouseImage
     * const houseImage = await prisma.houseImage.upsert({
     *   create: {
     *     // ... data to create a HouseImage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the HouseImage we want to update
     *   }
     * })
    **/
    upsert<T extends HouseImageUpsertArgs>(
      args: SelectSubset<T, HouseImageUpsertArgs>
    ): Prisma__HouseImageClient<HouseImageGetPayload<T>>

    /**
     * Count the number of HouseImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseImageCountArgs} args - Arguments to filter HouseImages to count.
     * @example
     * // Count the number of HouseImages
     * const count = await prisma.houseImage.count({
     *   where: {
     *     // ... the filter for the HouseImages we want to count
     *   }
     * })
    **/
    count<T extends HouseImageCountArgs>(
      args?: Subset<T, HouseImageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HouseImageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a HouseImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseImageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HouseImageAggregateArgs>(args: Subset<T, HouseImageAggregateArgs>): Prisma.PrismaPromise<GetHouseImageAggregateType<T>>

    /**
     * Group by HouseImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseImageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HouseImageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HouseImageGroupByArgs['orderBy'] }
        : { orderBy?: HouseImageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HouseImageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHouseImageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for HouseImage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__HouseImageClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    house<T extends HouseArgs= {}>(args?: Subset<T, HouseArgs>): Prisma__HouseClient<HouseGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * HouseImage base type for findUnique actions
   */
  export type HouseImageFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the HouseImage
     */
    select?: HouseImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseImageInclude | null
    /**
     * Filter, which HouseImage to fetch.
     */
    where: HouseImageWhereUniqueInput
  }

  /**
   * HouseImage findUnique
   */
  export interface HouseImageFindUniqueArgs extends HouseImageFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * HouseImage findUniqueOrThrow
   */
  export type HouseImageFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the HouseImage
     */
    select?: HouseImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseImageInclude | null
    /**
     * Filter, which HouseImage to fetch.
     */
    where: HouseImageWhereUniqueInput
  }


  /**
   * HouseImage base type for findFirst actions
   */
  export type HouseImageFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the HouseImage
     */
    select?: HouseImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseImageInclude | null
    /**
     * Filter, which HouseImage to fetch.
     */
    where?: HouseImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HouseImages to fetch.
     */
    orderBy?: Enumerable<HouseImageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HouseImages.
     */
    cursor?: HouseImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HouseImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HouseImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HouseImages.
     */
    distinct?: Enumerable<HouseImageScalarFieldEnum>
  }

  /**
   * HouseImage findFirst
   */
  export interface HouseImageFindFirstArgs extends HouseImageFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * HouseImage findFirstOrThrow
   */
  export type HouseImageFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the HouseImage
     */
    select?: HouseImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseImageInclude | null
    /**
     * Filter, which HouseImage to fetch.
     */
    where?: HouseImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HouseImages to fetch.
     */
    orderBy?: Enumerable<HouseImageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HouseImages.
     */
    cursor?: HouseImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HouseImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HouseImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HouseImages.
     */
    distinct?: Enumerable<HouseImageScalarFieldEnum>
  }


  /**
   * HouseImage findMany
   */
  export type HouseImageFindManyArgs = {
    /**
     * Select specific fields to fetch from the HouseImage
     */
    select?: HouseImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseImageInclude | null
    /**
     * Filter, which HouseImages to fetch.
     */
    where?: HouseImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HouseImages to fetch.
     */
    orderBy?: Enumerable<HouseImageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing HouseImages.
     */
    cursor?: HouseImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HouseImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HouseImages.
     */
    skip?: number
    distinct?: Enumerable<HouseImageScalarFieldEnum>
  }


  /**
   * HouseImage create
   */
  export type HouseImageCreateArgs = {
    /**
     * Select specific fields to fetch from the HouseImage
     */
    select?: HouseImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseImageInclude | null
    /**
     * The data needed to create a HouseImage.
     */
    data: XOR<HouseImageCreateInput, HouseImageUncheckedCreateInput>
  }


  /**
   * HouseImage createMany
   */
  export type HouseImageCreateManyArgs = {
    /**
     * The data used to create many HouseImages.
     */
    data: Enumerable<HouseImageCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * HouseImage update
   */
  export type HouseImageUpdateArgs = {
    /**
     * Select specific fields to fetch from the HouseImage
     */
    select?: HouseImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseImageInclude | null
    /**
     * The data needed to update a HouseImage.
     */
    data: XOR<HouseImageUpdateInput, HouseImageUncheckedUpdateInput>
    /**
     * Choose, which HouseImage to update.
     */
    where: HouseImageWhereUniqueInput
  }


  /**
   * HouseImage updateMany
   */
  export type HouseImageUpdateManyArgs = {
    /**
     * The data used to update HouseImages.
     */
    data: XOR<HouseImageUpdateManyMutationInput, HouseImageUncheckedUpdateManyInput>
    /**
     * Filter which HouseImages to update
     */
    where?: HouseImageWhereInput
  }


  /**
   * HouseImage upsert
   */
  export type HouseImageUpsertArgs = {
    /**
     * Select specific fields to fetch from the HouseImage
     */
    select?: HouseImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseImageInclude | null
    /**
     * The filter to search for the HouseImage to update in case it exists.
     */
    where: HouseImageWhereUniqueInput
    /**
     * In case the HouseImage found by the `where` argument doesn't exist, create a new HouseImage with this data.
     */
    create: XOR<HouseImageCreateInput, HouseImageUncheckedCreateInput>
    /**
     * In case the HouseImage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HouseImageUpdateInput, HouseImageUncheckedUpdateInput>
  }


  /**
   * HouseImage delete
   */
  export type HouseImageDeleteArgs = {
    /**
     * Select specific fields to fetch from the HouseImage
     */
    select?: HouseImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseImageInclude | null
    /**
     * Filter which HouseImage to delete.
     */
    where: HouseImageWhereUniqueInput
  }


  /**
   * HouseImage deleteMany
   */
  export type HouseImageDeleteManyArgs = {
    /**
     * Filter which HouseImages to delete
     */
    where?: HouseImageWhereInput
  }


  /**
   * HouseImage without action
   */
  export type HouseImageArgs = {
    /**
     * Select specific fields to fetch from the HouseImage
     */
    select?: HouseImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseImageInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const HouseImageScalarFieldEnum: {
    id: 'id',
    image: 'image',
    houseId: 'houseId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type HouseImageScalarFieldEnum = (typeof HouseImageScalarFieldEnum)[keyof typeof HouseImageScalarFieldEnum]


  export const HouseRequestScalarFieldEnum: {
    id: 'id',
    subCity: 'subCity',
    propertyType: 'propertyType',
    numberOfBedrooms: 'numberOfBedrooms',
    houseRequestType: 'houseRequestType',
    userTelegramID: 'userTelegramID',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type HouseRequestScalarFieldEnum = (typeof HouseRequestScalarFieldEnum)[keyof typeof HouseRequestScalarFieldEnum]


  export const HouseScalarFieldEnum: {
    id: 'id',
    subCity: 'subCity',
    woredaOrSpecificPlace: 'woredaOrSpecificPlace',
    propertyType: 'propertyType',
    numberOfBedrooms: 'numberOfBedrooms',
    numberOfBathrooms: 'numberOfBathrooms',
    housePostType: 'housePostType',
    price: 'price',
    area: 'area',
    status: 'status',
    userTelegramID: 'userTelegramID',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type HouseScalarFieldEnum = (typeof HouseScalarFieldEnum)[keyof typeof HouseScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    key: 'key',
    value: 'value'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    telegramId: 'telegramId',
    telegramFirstName: 'telegramFirstName',
    telegramLastName: 'telegramLastName',
    fullName: 'fullName',
    language: 'language',
    phoneNumber: 'phoneNumber',
    userName: 'userName',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type SessionWhereInput = {
    AND?: Enumerable<SessionWhereInput>
    OR?: Enumerable<SessionWhereInput>
    NOT?: Enumerable<SessionWhereInput>
    id?: IntFilter | number
    key?: StringFilter | string
    value?: StringFilter | string
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
  }

  export type SessionWhereUniqueInput = {
    id?: number
    key?: string
  }

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _avg?: SessionAvgOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
    _sum?: SessionSumOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SessionScalarWhereWithAggregatesInput>
    OR?: Enumerable<SessionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SessionScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    key?: StringWithAggregatesFilter | string
    value?: StringWithAggregatesFilter | string
  }

  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    telegramId?: StringFilter | string
    telegramFirstName?: StringNullableFilter | string | null
    telegramLastName?: StringNullableFilter | string | null
    fullName?: StringNullableFilter | string | null
    language?: EnumLanguageFilter | Language
    phoneNumber?: StringNullableFilter | string | null
    userName?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    houses?: HouseListRelationFilter
    houseRequests?: HouseRequestListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    telegramId?: SortOrder
    telegramFirstName?: SortOrder
    telegramLastName?: SortOrder
    fullName?: SortOrder
    language?: SortOrder
    phoneNumber?: SortOrder
    userName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    houses?: HouseOrderByRelationAggregateInput
    houseRequests?: HouseRequestOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    telegramId?: string
    phoneNumber?: string
    userName?: string
  }

  export type UserOrderByWithAggregationInput = {
    telegramId?: SortOrder
    telegramFirstName?: SortOrder
    telegramLastName?: SortOrder
    fullName?: SortOrder
    language?: SortOrder
    phoneNumber?: SortOrder
    userName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    telegramId?: StringWithAggregatesFilter | string
    telegramFirstName?: StringNullableWithAggregatesFilter | string | null
    telegramLastName?: StringNullableWithAggregatesFilter | string | null
    fullName?: StringNullableWithAggregatesFilter | string | null
    language?: EnumLanguageWithAggregatesFilter | Language
    phoneNumber?: StringNullableWithAggregatesFilter | string | null
    userName?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type HouseWhereInput = {
    AND?: Enumerable<HouseWhereInput>
    OR?: Enumerable<HouseWhereInput>
    NOT?: Enumerable<HouseWhereInput>
    id?: IntFilter | number
    subCity?: StringFilter | string
    woredaOrSpecificPlace?: StringFilter | string
    propertyType?: StringFilter | string
    numberOfBedrooms?: IntFilter | number
    numberOfBathrooms?: IntFilter | number
    housePostType?: EnumHousePostTypeFilter | HousePostType
    price?: FloatFilter | number
    area?: StringFilter | string
    status?: EnumStatusFilter | Status
    userTelegramID?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    houseImages?: HouseImageListRelationFilter
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type HouseOrderByWithRelationInput = {
    id?: SortOrder
    subCity?: SortOrder
    woredaOrSpecificPlace?: SortOrder
    propertyType?: SortOrder
    numberOfBedrooms?: SortOrder
    numberOfBathrooms?: SortOrder
    housePostType?: SortOrder
    price?: SortOrder
    area?: SortOrder
    status?: SortOrder
    userTelegramID?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    houseImages?: HouseImageOrderByRelationAggregateInput
    user?: UserOrderByWithRelationInput
  }

  export type HouseWhereUniqueInput = {
    id?: number
  }

  export type HouseOrderByWithAggregationInput = {
    id?: SortOrder
    subCity?: SortOrder
    woredaOrSpecificPlace?: SortOrder
    propertyType?: SortOrder
    numberOfBedrooms?: SortOrder
    numberOfBathrooms?: SortOrder
    housePostType?: SortOrder
    price?: SortOrder
    area?: SortOrder
    status?: SortOrder
    userTelegramID?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: HouseCountOrderByAggregateInput
    _avg?: HouseAvgOrderByAggregateInput
    _max?: HouseMaxOrderByAggregateInput
    _min?: HouseMinOrderByAggregateInput
    _sum?: HouseSumOrderByAggregateInput
  }

  export type HouseScalarWhereWithAggregatesInput = {
    AND?: Enumerable<HouseScalarWhereWithAggregatesInput>
    OR?: Enumerable<HouseScalarWhereWithAggregatesInput>
    NOT?: Enumerable<HouseScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    subCity?: StringWithAggregatesFilter | string
    woredaOrSpecificPlace?: StringWithAggregatesFilter | string
    propertyType?: StringWithAggregatesFilter | string
    numberOfBedrooms?: IntWithAggregatesFilter | number
    numberOfBathrooms?: IntWithAggregatesFilter | number
    housePostType?: EnumHousePostTypeWithAggregatesFilter | HousePostType
    price?: FloatWithAggregatesFilter | number
    area?: StringWithAggregatesFilter | string
    status?: EnumStatusWithAggregatesFilter | Status
    userTelegramID?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type HouseRequestWhereInput = {
    AND?: Enumerable<HouseRequestWhereInput>
    OR?: Enumerable<HouseRequestWhereInput>
    NOT?: Enumerable<HouseRequestWhereInput>
    id?: IntFilter | number
    subCity?: StringFilter | string
    propertyType?: StringFilter | string
    numberOfBedrooms?: IntFilter | number
    houseRequestType?: EnumHouseRequestTypeFilter | HouseRequestType
    userTelegramID?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type HouseRequestOrderByWithRelationInput = {
    id?: SortOrder
    subCity?: SortOrder
    propertyType?: SortOrder
    numberOfBedrooms?: SortOrder
    houseRequestType?: SortOrder
    userTelegramID?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type HouseRequestWhereUniqueInput = {
    id?: number
  }

  export type HouseRequestOrderByWithAggregationInput = {
    id?: SortOrder
    subCity?: SortOrder
    propertyType?: SortOrder
    numberOfBedrooms?: SortOrder
    houseRequestType?: SortOrder
    userTelegramID?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: HouseRequestCountOrderByAggregateInput
    _avg?: HouseRequestAvgOrderByAggregateInput
    _max?: HouseRequestMaxOrderByAggregateInput
    _min?: HouseRequestMinOrderByAggregateInput
    _sum?: HouseRequestSumOrderByAggregateInput
  }

  export type HouseRequestScalarWhereWithAggregatesInput = {
    AND?: Enumerable<HouseRequestScalarWhereWithAggregatesInput>
    OR?: Enumerable<HouseRequestScalarWhereWithAggregatesInput>
    NOT?: Enumerable<HouseRequestScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    subCity?: StringWithAggregatesFilter | string
    propertyType?: StringWithAggregatesFilter | string
    numberOfBedrooms?: IntWithAggregatesFilter | number
    houseRequestType?: EnumHouseRequestTypeWithAggregatesFilter | HouseRequestType
    userTelegramID?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type HouseImageWhereInput = {
    AND?: Enumerable<HouseImageWhereInput>
    OR?: Enumerable<HouseImageWhereInput>
    NOT?: Enumerable<HouseImageWhereInput>
    id?: IntFilter | number
    image?: StringFilter | string
    houseId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    house?: XOR<HouseRelationFilter, HouseWhereInput>
  }

  export type HouseImageOrderByWithRelationInput = {
    id?: SortOrder
    image?: SortOrder
    houseId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    house?: HouseOrderByWithRelationInput
  }

  export type HouseImageWhereUniqueInput = {
    id?: number
  }

  export type HouseImageOrderByWithAggregationInput = {
    id?: SortOrder
    image?: SortOrder
    houseId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: HouseImageCountOrderByAggregateInput
    _avg?: HouseImageAvgOrderByAggregateInput
    _max?: HouseImageMaxOrderByAggregateInput
    _min?: HouseImageMinOrderByAggregateInput
    _sum?: HouseImageSumOrderByAggregateInput
  }

  export type HouseImageScalarWhereWithAggregatesInput = {
    AND?: Enumerable<HouseImageScalarWhereWithAggregatesInput>
    OR?: Enumerable<HouseImageScalarWhereWithAggregatesInput>
    NOT?: Enumerable<HouseImageScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    image?: StringWithAggregatesFilter | string
    houseId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type SessionCreateInput = {
    key: string
    value: string
  }

  export type SessionUncheckedCreateInput = {
    id?: number
    key: string
    value: string
  }

  export type SessionUpdateInput = {
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
  }

  export type SessionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
  }

  export type SessionCreateManyInput = {
    id?: number
    key: string
    value: string
  }

  export type SessionUpdateManyMutationInput = {
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateInput = {
    telegramId: string
    telegramFirstName?: string | null
    telegramLastName?: string | null
    fullName?: string | null
    language?: Language
    phoneNumber?: string | null
    userName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    houses?: HouseCreateNestedManyWithoutUserInput
    houseRequests?: HouseRequestCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    telegramId: string
    telegramFirstName?: string | null
    telegramLastName?: string | null
    fullName?: string | null
    language?: Language
    phoneNumber?: string | null
    userName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    houses?: HouseUncheckedCreateNestedManyWithoutUserInput
    houseRequests?: HouseRequestUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    telegramFirstName?: NullableStringFieldUpdateOperationsInput | string | null
    telegramLastName?: NullableStringFieldUpdateOperationsInput | string | null
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    language?: EnumLanguageFieldUpdateOperationsInput | Language
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    userName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    houses?: HouseUpdateManyWithoutUserNestedInput
    houseRequests?: HouseRequestUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    telegramFirstName?: NullableStringFieldUpdateOperationsInput | string | null
    telegramLastName?: NullableStringFieldUpdateOperationsInput | string | null
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    language?: EnumLanguageFieldUpdateOperationsInput | Language
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    userName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    houses?: HouseUncheckedUpdateManyWithoutUserNestedInput
    houseRequests?: HouseRequestUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    telegramId: string
    telegramFirstName?: string | null
    telegramLastName?: string | null
    fullName?: string | null
    language?: Language
    phoneNumber?: string | null
    userName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    telegramFirstName?: NullableStringFieldUpdateOperationsInput | string | null
    telegramLastName?: NullableStringFieldUpdateOperationsInput | string | null
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    language?: EnumLanguageFieldUpdateOperationsInput | Language
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    userName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    telegramFirstName?: NullableStringFieldUpdateOperationsInput | string | null
    telegramLastName?: NullableStringFieldUpdateOperationsInput | string | null
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    language?: EnumLanguageFieldUpdateOperationsInput | Language
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    userName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HouseCreateInput = {
    subCity: string
    woredaOrSpecificPlace: string
    propertyType: string
    numberOfBedrooms: number
    numberOfBathrooms: number
    housePostType: HousePostType
    price: number
    area: string
    status?: Status
    createdAt?: Date | string
    updatedAt?: Date | string
    houseImages?: HouseImageCreateNestedManyWithoutHouseInput
    user: UserCreateNestedOneWithoutHousesInput
  }

  export type HouseUncheckedCreateInput = {
    id?: number
    subCity: string
    woredaOrSpecificPlace: string
    propertyType: string
    numberOfBedrooms: number
    numberOfBathrooms: number
    housePostType: HousePostType
    price: number
    area: string
    status?: Status
    userTelegramID: string
    createdAt?: Date | string
    updatedAt?: Date | string
    houseImages?: HouseImageUncheckedCreateNestedManyWithoutHouseInput
  }

  export type HouseUpdateInput = {
    subCity?: StringFieldUpdateOperationsInput | string
    woredaOrSpecificPlace?: StringFieldUpdateOperationsInput | string
    propertyType?: StringFieldUpdateOperationsInput | string
    numberOfBedrooms?: IntFieldUpdateOperationsInput | number
    numberOfBathrooms?: IntFieldUpdateOperationsInput | number
    housePostType?: EnumHousePostTypeFieldUpdateOperationsInput | HousePostType
    price?: FloatFieldUpdateOperationsInput | number
    area?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    houseImages?: HouseImageUpdateManyWithoutHouseNestedInput
    user?: UserUpdateOneRequiredWithoutHousesNestedInput
  }

  export type HouseUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    subCity?: StringFieldUpdateOperationsInput | string
    woredaOrSpecificPlace?: StringFieldUpdateOperationsInput | string
    propertyType?: StringFieldUpdateOperationsInput | string
    numberOfBedrooms?: IntFieldUpdateOperationsInput | number
    numberOfBathrooms?: IntFieldUpdateOperationsInput | number
    housePostType?: EnumHousePostTypeFieldUpdateOperationsInput | HousePostType
    price?: FloatFieldUpdateOperationsInput | number
    area?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | Status
    userTelegramID?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    houseImages?: HouseImageUncheckedUpdateManyWithoutHouseNestedInput
  }

  export type HouseCreateManyInput = {
    id?: number
    subCity: string
    woredaOrSpecificPlace: string
    propertyType: string
    numberOfBedrooms: number
    numberOfBathrooms: number
    housePostType: HousePostType
    price: number
    area: string
    status?: Status
    userTelegramID: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HouseUpdateManyMutationInput = {
    subCity?: StringFieldUpdateOperationsInput | string
    woredaOrSpecificPlace?: StringFieldUpdateOperationsInput | string
    propertyType?: StringFieldUpdateOperationsInput | string
    numberOfBedrooms?: IntFieldUpdateOperationsInput | number
    numberOfBathrooms?: IntFieldUpdateOperationsInput | number
    housePostType?: EnumHousePostTypeFieldUpdateOperationsInput | HousePostType
    price?: FloatFieldUpdateOperationsInput | number
    area?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HouseUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    subCity?: StringFieldUpdateOperationsInput | string
    woredaOrSpecificPlace?: StringFieldUpdateOperationsInput | string
    propertyType?: StringFieldUpdateOperationsInput | string
    numberOfBedrooms?: IntFieldUpdateOperationsInput | number
    numberOfBathrooms?: IntFieldUpdateOperationsInput | number
    housePostType?: EnumHousePostTypeFieldUpdateOperationsInput | HousePostType
    price?: FloatFieldUpdateOperationsInput | number
    area?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | Status
    userTelegramID?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HouseRequestCreateInput = {
    subCity: string
    propertyType: string
    numberOfBedrooms: number
    houseRequestType: HouseRequestType
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutHouseRequestsInput
  }

  export type HouseRequestUncheckedCreateInput = {
    id?: number
    subCity: string
    propertyType: string
    numberOfBedrooms: number
    houseRequestType: HouseRequestType
    userTelegramID: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HouseRequestUpdateInput = {
    subCity?: StringFieldUpdateOperationsInput | string
    propertyType?: StringFieldUpdateOperationsInput | string
    numberOfBedrooms?: IntFieldUpdateOperationsInput | number
    houseRequestType?: EnumHouseRequestTypeFieldUpdateOperationsInput | HouseRequestType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutHouseRequestsNestedInput
  }

  export type HouseRequestUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    subCity?: StringFieldUpdateOperationsInput | string
    propertyType?: StringFieldUpdateOperationsInput | string
    numberOfBedrooms?: IntFieldUpdateOperationsInput | number
    houseRequestType?: EnumHouseRequestTypeFieldUpdateOperationsInput | HouseRequestType
    userTelegramID?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HouseRequestCreateManyInput = {
    id?: number
    subCity: string
    propertyType: string
    numberOfBedrooms: number
    houseRequestType: HouseRequestType
    userTelegramID: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HouseRequestUpdateManyMutationInput = {
    subCity?: StringFieldUpdateOperationsInput | string
    propertyType?: StringFieldUpdateOperationsInput | string
    numberOfBedrooms?: IntFieldUpdateOperationsInput | number
    houseRequestType?: EnumHouseRequestTypeFieldUpdateOperationsInput | HouseRequestType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HouseRequestUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    subCity?: StringFieldUpdateOperationsInput | string
    propertyType?: StringFieldUpdateOperationsInput | string
    numberOfBedrooms?: IntFieldUpdateOperationsInput | number
    houseRequestType?: EnumHouseRequestTypeFieldUpdateOperationsInput | HouseRequestType
    userTelegramID?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HouseImageCreateInput = {
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
    house: HouseCreateNestedOneWithoutHouseImagesInput
  }

  export type HouseImageUncheckedCreateInput = {
    id?: number
    image: string
    houseId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HouseImageUpdateInput = {
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    house?: HouseUpdateOneRequiredWithoutHouseImagesNestedInput
  }

  export type HouseImageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    houseId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HouseImageCreateManyInput = {
    id?: number
    image: string
    houseId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HouseImageUpdateManyMutationInput = {
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HouseImageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    houseId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
  }

  export type SessionAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
  }

  export type SessionSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type EnumLanguageFilter = {
    equals?: Language
    in?: Enumerable<Language>
    notIn?: Enumerable<Language>
    not?: NestedEnumLanguageFilter | Language
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type HouseListRelationFilter = {
    every?: HouseWhereInput
    some?: HouseWhereInput
    none?: HouseWhereInput
  }

  export type HouseRequestListRelationFilter = {
    every?: HouseRequestWhereInput
    some?: HouseRequestWhereInput
    none?: HouseRequestWhereInput
  }

  export type HouseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type HouseRequestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    telegramId?: SortOrder
    telegramFirstName?: SortOrder
    telegramLastName?: SortOrder
    fullName?: SortOrder
    language?: SortOrder
    phoneNumber?: SortOrder
    userName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    telegramId?: SortOrder
    telegramFirstName?: SortOrder
    telegramLastName?: SortOrder
    fullName?: SortOrder
    language?: SortOrder
    phoneNumber?: SortOrder
    userName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    telegramId?: SortOrder
    telegramFirstName?: SortOrder
    telegramLastName?: SortOrder
    fullName?: SortOrder
    language?: SortOrder
    phoneNumber?: SortOrder
    userName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type EnumLanguageWithAggregatesFilter = {
    equals?: Language
    in?: Enumerable<Language>
    notIn?: Enumerable<Language>
    not?: NestedEnumLanguageWithAggregatesFilter | Language
    _count?: NestedIntFilter
    _min?: NestedEnumLanguageFilter
    _max?: NestedEnumLanguageFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type EnumHousePostTypeFilter = {
    equals?: HousePostType
    in?: Enumerable<HousePostType>
    notIn?: Enumerable<HousePostType>
    not?: NestedEnumHousePostTypeFilter | HousePostType
  }

  export type FloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type EnumStatusFilter = {
    equals?: Status
    in?: Enumerable<Status>
    notIn?: Enumerable<Status>
    not?: NestedEnumStatusFilter | Status
  }

  export type HouseImageListRelationFilter = {
    every?: HouseImageWhereInput
    some?: HouseImageWhereInput
    none?: HouseImageWhereInput
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type HouseImageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type HouseCountOrderByAggregateInput = {
    id?: SortOrder
    subCity?: SortOrder
    woredaOrSpecificPlace?: SortOrder
    propertyType?: SortOrder
    numberOfBedrooms?: SortOrder
    numberOfBathrooms?: SortOrder
    housePostType?: SortOrder
    price?: SortOrder
    area?: SortOrder
    status?: SortOrder
    userTelegramID?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HouseAvgOrderByAggregateInput = {
    id?: SortOrder
    numberOfBedrooms?: SortOrder
    numberOfBathrooms?: SortOrder
    price?: SortOrder
  }

  export type HouseMaxOrderByAggregateInput = {
    id?: SortOrder
    subCity?: SortOrder
    woredaOrSpecificPlace?: SortOrder
    propertyType?: SortOrder
    numberOfBedrooms?: SortOrder
    numberOfBathrooms?: SortOrder
    housePostType?: SortOrder
    price?: SortOrder
    area?: SortOrder
    status?: SortOrder
    userTelegramID?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HouseMinOrderByAggregateInput = {
    id?: SortOrder
    subCity?: SortOrder
    woredaOrSpecificPlace?: SortOrder
    propertyType?: SortOrder
    numberOfBedrooms?: SortOrder
    numberOfBathrooms?: SortOrder
    housePostType?: SortOrder
    price?: SortOrder
    area?: SortOrder
    status?: SortOrder
    userTelegramID?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HouseSumOrderByAggregateInput = {
    id?: SortOrder
    numberOfBedrooms?: SortOrder
    numberOfBathrooms?: SortOrder
    price?: SortOrder
  }

  export type EnumHousePostTypeWithAggregatesFilter = {
    equals?: HousePostType
    in?: Enumerable<HousePostType>
    notIn?: Enumerable<HousePostType>
    not?: NestedEnumHousePostTypeWithAggregatesFilter | HousePostType
    _count?: NestedIntFilter
    _min?: NestedEnumHousePostTypeFilter
    _max?: NestedEnumHousePostTypeFilter
  }

  export type FloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type EnumStatusWithAggregatesFilter = {
    equals?: Status
    in?: Enumerable<Status>
    notIn?: Enumerable<Status>
    not?: NestedEnumStatusWithAggregatesFilter | Status
    _count?: NestedIntFilter
    _min?: NestedEnumStatusFilter
    _max?: NestedEnumStatusFilter
  }

  export type EnumHouseRequestTypeFilter = {
    equals?: HouseRequestType
    in?: Enumerable<HouseRequestType>
    notIn?: Enumerable<HouseRequestType>
    not?: NestedEnumHouseRequestTypeFilter | HouseRequestType
  }

  export type HouseRequestCountOrderByAggregateInput = {
    id?: SortOrder
    subCity?: SortOrder
    propertyType?: SortOrder
    numberOfBedrooms?: SortOrder
    houseRequestType?: SortOrder
    userTelegramID?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HouseRequestAvgOrderByAggregateInput = {
    id?: SortOrder
    numberOfBedrooms?: SortOrder
  }

  export type HouseRequestMaxOrderByAggregateInput = {
    id?: SortOrder
    subCity?: SortOrder
    propertyType?: SortOrder
    numberOfBedrooms?: SortOrder
    houseRequestType?: SortOrder
    userTelegramID?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HouseRequestMinOrderByAggregateInput = {
    id?: SortOrder
    subCity?: SortOrder
    propertyType?: SortOrder
    numberOfBedrooms?: SortOrder
    houseRequestType?: SortOrder
    userTelegramID?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HouseRequestSumOrderByAggregateInput = {
    id?: SortOrder
    numberOfBedrooms?: SortOrder
  }

  export type EnumHouseRequestTypeWithAggregatesFilter = {
    equals?: HouseRequestType
    in?: Enumerable<HouseRequestType>
    notIn?: Enumerable<HouseRequestType>
    not?: NestedEnumHouseRequestTypeWithAggregatesFilter | HouseRequestType
    _count?: NestedIntFilter
    _min?: NestedEnumHouseRequestTypeFilter
    _max?: NestedEnumHouseRequestTypeFilter
  }

  export type HouseRelationFilter = {
    is?: HouseWhereInput
    isNot?: HouseWhereInput
  }

  export type HouseImageCountOrderByAggregateInput = {
    id?: SortOrder
    image?: SortOrder
    houseId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HouseImageAvgOrderByAggregateInput = {
    id?: SortOrder
    houseId?: SortOrder
  }

  export type HouseImageMaxOrderByAggregateInput = {
    id?: SortOrder
    image?: SortOrder
    houseId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HouseImageMinOrderByAggregateInput = {
    id?: SortOrder
    image?: SortOrder
    houseId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HouseImageSumOrderByAggregateInput = {
    id?: SortOrder
    houseId?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type HouseCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<HouseCreateWithoutUserInput>, Enumerable<HouseUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<HouseCreateOrConnectWithoutUserInput>
    createMany?: HouseCreateManyUserInputEnvelope
    connect?: Enumerable<HouseWhereUniqueInput>
  }

  export type HouseRequestCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<HouseRequestCreateWithoutUserInput>, Enumerable<HouseRequestUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<HouseRequestCreateOrConnectWithoutUserInput>
    createMany?: HouseRequestCreateManyUserInputEnvelope
    connect?: Enumerable<HouseRequestWhereUniqueInput>
  }

  export type HouseUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<HouseCreateWithoutUserInput>, Enumerable<HouseUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<HouseCreateOrConnectWithoutUserInput>
    createMany?: HouseCreateManyUserInputEnvelope
    connect?: Enumerable<HouseWhereUniqueInput>
  }

  export type HouseRequestUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<HouseRequestCreateWithoutUserInput>, Enumerable<HouseRequestUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<HouseRequestCreateOrConnectWithoutUserInput>
    createMany?: HouseRequestCreateManyUserInputEnvelope
    connect?: Enumerable<HouseRequestWhereUniqueInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumLanguageFieldUpdateOperationsInput = {
    set?: Language
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type HouseUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<HouseCreateWithoutUserInput>, Enumerable<HouseUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<HouseCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<HouseUpsertWithWhereUniqueWithoutUserInput>
    createMany?: HouseCreateManyUserInputEnvelope
    set?: Enumerable<HouseWhereUniqueInput>
    disconnect?: Enumerable<HouseWhereUniqueInput>
    delete?: Enumerable<HouseWhereUniqueInput>
    connect?: Enumerable<HouseWhereUniqueInput>
    update?: Enumerable<HouseUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<HouseUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<HouseScalarWhereInput>
  }

  export type HouseRequestUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<HouseRequestCreateWithoutUserInput>, Enumerable<HouseRequestUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<HouseRequestCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<HouseRequestUpsertWithWhereUniqueWithoutUserInput>
    createMany?: HouseRequestCreateManyUserInputEnvelope
    set?: Enumerable<HouseRequestWhereUniqueInput>
    disconnect?: Enumerable<HouseRequestWhereUniqueInput>
    delete?: Enumerable<HouseRequestWhereUniqueInput>
    connect?: Enumerable<HouseRequestWhereUniqueInput>
    update?: Enumerable<HouseRequestUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<HouseRequestUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<HouseRequestScalarWhereInput>
  }

  export type HouseUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<HouseCreateWithoutUserInput>, Enumerable<HouseUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<HouseCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<HouseUpsertWithWhereUniqueWithoutUserInput>
    createMany?: HouseCreateManyUserInputEnvelope
    set?: Enumerable<HouseWhereUniqueInput>
    disconnect?: Enumerable<HouseWhereUniqueInput>
    delete?: Enumerable<HouseWhereUniqueInput>
    connect?: Enumerable<HouseWhereUniqueInput>
    update?: Enumerable<HouseUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<HouseUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<HouseScalarWhereInput>
  }

  export type HouseRequestUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<HouseRequestCreateWithoutUserInput>, Enumerable<HouseRequestUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<HouseRequestCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<HouseRequestUpsertWithWhereUniqueWithoutUserInput>
    createMany?: HouseRequestCreateManyUserInputEnvelope
    set?: Enumerable<HouseRequestWhereUniqueInput>
    disconnect?: Enumerable<HouseRequestWhereUniqueInput>
    delete?: Enumerable<HouseRequestWhereUniqueInput>
    connect?: Enumerable<HouseRequestWhereUniqueInput>
    update?: Enumerable<HouseRequestUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<HouseRequestUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<HouseRequestScalarWhereInput>
  }

  export type HouseImageCreateNestedManyWithoutHouseInput = {
    create?: XOR<Enumerable<HouseImageCreateWithoutHouseInput>, Enumerable<HouseImageUncheckedCreateWithoutHouseInput>>
    connectOrCreate?: Enumerable<HouseImageCreateOrConnectWithoutHouseInput>
    createMany?: HouseImageCreateManyHouseInputEnvelope
    connect?: Enumerable<HouseImageWhereUniqueInput>
  }

  export type UserCreateNestedOneWithoutHousesInput = {
    create?: XOR<UserCreateWithoutHousesInput, UserUncheckedCreateWithoutHousesInput>
    connectOrCreate?: UserCreateOrConnectWithoutHousesInput
    connect?: UserWhereUniqueInput
  }

  export type HouseImageUncheckedCreateNestedManyWithoutHouseInput = {
    create?: XOR<Enumerable<HouseImageCreateWithoutHouseInput>, Enumerable<HouseImageUncheckedCreateWithoutHouseInput>>
    connectOrCreate?: Enumerable<HouseImageCreateOrConnectWithoutHouseInput>
    createMany?: HouseImageCreateManyHouseInputEnvelope
    connect?: Enumerable<HouseImageWhereUniqueInput>
  }

  export type EnumHousePostTypeFieldUpdateOperationsInput = {
    set?: HousePostType
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumStatusFieldUpdateOperationsInput = {
    set?: Status
  }

  export type HouseImageUpdateManyWithoutHouseNestedInput = {
    create?: XOR<Enumerable<HouseImageCreateWithoutHouseInput>, Enumerable<HouseImageUncheckedCreateWithoutHouseInput>>
    connectOrCreate?: Enumerable<HouseImageCreateOrConnectWithoutHouseInput>
    upsert?: Enumerable<HouseImageUpsertWithWhereUniqueWithoutHouseInput>
    createMany?: HouseImageCreateManyHouseInputEnvelope
    set?: Enumerable<HouseImageWhereUniqueInput>
    disconnect?: Enumerable<HouseImageWhereUniqueInput>
    delete?: Enumerable<HouseImageWhereUniqueInput>
    connect?: Enumerable<HouseImageWhereUniqueInput>
    update?: Enumerable<HouseImageUpdateWithWhereUniqueWithoutHouseInput>
    updateMany?: Enumerable<HouseImageUpdateManyWithWhereWithoutHouseInput>
    deleteMany?: Enumerable<HouseImageScalarWhereInput>
  }

  export type UserUpdateOneRequiredWithoutHousesNestedInput = {
    create?: XOR<UserCreateWithoutHousesInput, UserUncheckedCreateWithoutHousesInput>
    connectOrCreate?: UserCreateOrConnectWithoutHousesInput
    upsert?: UserUpsertWithoutHousesInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutHousesInput, UserUncheckedUpdateWithoutHousesInput>
  }

  export type HouseImageUncheckedUpdateManyWithoutHouseNestedInput = {
    create?: XOR<Enumerable<HouseImageCreateWithoutHouseInput>, Enumerable<HouseImageUncheckedCreateWithoutHouseInput>>
    connectOrCreate?: Enumerable<HouseImageCreateOrConnectWithoutHouseInput>
    upsert?: Enumerable<HouseImageUpsertWithWhereUniqueWithoutHouseInput>
    createMany?: HouseImageCreateManyHouseInputEnvelope
    set?: Enumerable<HouseImageWhereUniqueInput>
    disconnect?: Enumerable<HouseImageWhereUniqueInput>
    delete?: Enumerable<HouseImageWhereUniqueInput>
    connect?: Enumerable<HouseImageWhereUniqueInput>
    update?: Enumerable<HouseImageUpdateWithWhereUniqueWithoutHouseInput>
    updateMany?: Enumerable<HouseImageUpdateManyWithWhereWithoutHouseInput>
    deleteMany?: Enumerable<HouseImageScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutHouseRequestsInput = {
    create?: XOR<UserCreateWithoutHouseRequestsInput, UserUncheckedCreateWithoutHouseRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutHouseRequestsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumHouseRequestTypeFieldUpdateOperationsInput = {
    set?: HouseRequestType
  }

  export type UserUpdateOneRequiredWithoutHouseRequestsNestedInput = {
    create?: XOR<UserCreateWithoutHouseRequestsInput, UserUncheckedCreateWithoutHouseRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutHouseRequestsInput
    upsert?: UserUpsertWithoutHouseRequestsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutHouseRequestsInput, UserUncheckedUpdateWithoutHouseRequestsInput>
  }

  export type HouseCreateNestedOneWithoutHouseImagesInput = {
    create?: XOR<HouseCreateWithoutHouseImagesInput, HouseUncheckedCreateWithoutHouseImagesInput>
    connectOrCreate?: HouseCreateOrConnectWithoutHouseImagesInput
    connect?: HouseWhereUniqueInput
  }

  export type HouseUpdateOneRequiredWithoutHouseImagesNestedInput = {
    create?: XOR<HouseCreateWithoutHouseImagesInput, HouseUncheckedCreateWithoutHouseImagesInput>
    connectOrCreate?: HouseCreateOrConnectWithoutHouseImagesInput
    upsert?: HouseUpsertWithoutHouseImagesInput
    connect?: HouseWhereUniqueInput
    update?: XOR<HouseUpdateWithoutHouseImagesInput, HouseUncheckedUpdateWithoutHouseImagesInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedEnumLanguageFilter = {
    equals?: Language
    in?: Enumerable<Language>
    notIn?: Enumerable<Language>
    not?: NestedEnumLanguageFilter | Language
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedEnumLanguageWithAggregatesFilter = {
    equals?: Language
    in?: Enumerable<Language>
    notIn?: Enumerable<Language>
    not?: NestedEnumLanguageWithAggregatesFilter | Language
    _count?: NestedIntFilter
    _min?: NestedEnumLanguageFilter
    _max?: NestedEnumLanguageFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedEnumHousePostTypeFilter = {
    equals?: HousePostType
    in?: Enumerable<HousePostType>
    notIn?: Enumerable<HousePostType>
    not?: NestedEnumHousePostTypeFilter | HousePostType
  }

  export type NestedEnumStatusFilter = {
    equals?: Status
    in?: Enumerable<Status>
    notIn?: Enumerable<Status>
    not?: NestedEnumStatusFilter | Status
  }

  export type NestedEnumHousePostTypeWithAggregatesFilter = {
    equals?: HousePostType
    in?: Enumerable<HousePostType>
    notIn?: Enumerable<HousePostType>
    not?: NestedEnumHousePostTypeWithAggregatesFilter | HousePostType
    _count?: NestedIntFilter
    _min?: NestedEnumHousePostTypeFilter
    _max?: NestedEnumHousePostTypeFilter
  }

  export type NestedFloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type NestedEnumStatusWithAggregatesFilter = {
    equals?: Status
    in?: Enumerable<Status>
    notIn?: Enumerable<Status>
    not?: NestedEnumStatusWithAggregatesFilter | Status
    _count?: NestedIntFilter
    _min?: NestedEnumStatusFilter
    _max?: NestedEnumStatusFilter
  }

  export type NestedEnumHouseRequestTypeFilter = {
    equals?: HouseRequestType
    in?: Enumerable<HouseRequestType>
    notIn?: Enumerable<HouseRequestType>
    not?: NestedEnumHouseRequestTypeFilter | HouseRequestType
  }

  export type NestedEnumHouseRequestTypeWithAggregatesFilter = {
    equals?: HouseRequestType
    in?: Enumerable<HouseRequestType>
    notIn?: Enumerable<HouseRequestType>
    not?: NestedEnumHouseRequestTypeWithAggregatesFilter | HouseRequestType
    _count?: NestedIntFilter
    _min?: NestedEnumHouseRequestTypeFilter
    _max?: NestedEnumHouseRequestTypeFilter
  }

  export type HouseCreateWithoutUserInput = {
    subCity: string
    woredaOrSpecificPlace: string
    propertyType: string
    numberOfBedrooms: number
    numberOfBathrooms: number
    housePostType: HousePostType
    price: number
    area: string
    status?: Status
    createdAt?: Date | string
    updatedAt?: Date | string
    houseImages?: HouseImageCreateNestedManyWithoutHouseInput
  }

  export type HouseUncheckedCreateWithoutUserInput = {
    id?: number
    subCity: string
    woredaOrSpecificPlace: string
    propertyType: string
    numberOfBedrooms: number
    numberOfBathrooms: number
    housePostType: HousePostType
    price: number
    area: string
    status?: Status
    createdAt?: Date | string
    updatedAt?: Date | string
    houseImages?: HouseImageUncheckedCreateNestedManyWithoutHouseInput
  }

  export type HouseCreateOrConnectWithoutUserInput = {
    where: HouseWhereUniqueInput
    create: XOR<HouseCreateWithoutUserInput, HouseUncheckedCreateWithoutUserInput>
  }

  export type HouseCreateManyUserInputEnvelope = {
    data: Enumerable<HouseCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type HouseRequestCreateWithoutUserInput = {
    subCity: string
    propertyType: string
    numberOfBedrooms: number
    houseRequestType: HouseRequestType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HouseRequestUncheckedCreateWithoutUserInput = {
    id?: number
    subCity: string
    propertyType: string
    numberOfBedrooms: number
    houseRequestType: HouseRequestType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HouseRequestCreateOrConnectWithoutUserInput = {
    where: HouseRequestWhereUniqueInput
    create: XOR<HouseRequestCreateWithoutUserInput, HouseRequestUncheckedCreateWithoutUserInput>
  }

  export type HouseRequestCreateManyUserInputEnvelope = {
    data: Enumerable<HouseRequestCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type HouseUpsertWithWhereUniqueWithoutUserInput = {
    where: HouseWhereUniqueInput
    update: XOR<HouseUpdateWithoutUserInput, HouseUncheckedUpdateWithoutUserInput>
    create: XOR<HouseCreateWithoutUserInput, HouseUncheckedCreateWithoutUserInput>
  }

  export type HouseUpdateWithWhereUniqueWithoutUserInput = {
    where: HouseWhereUniqueInput
    data: XOR<HouseUpdateWithoutUserInput, HouseUncheckedUpdateWithoutUserInput>
  }

  export type HouseUpdateManyWithWhereWithoutUserInput = {
    where: HouseScalarWhereInput
    data: XOR<HouseUpdateManyMutationInput, HouseUncheckedUpdateManyWithoutHousesInput>
  }

  export type HouseScalarWhereInput = {
    AND?: Enumerable<HouseScalarWhereInput>
    OR?: Enumerable<HouseScalarWhereInput>
    NOT?: Enumerable<HouseScalarWhereInput>
    id?: IntFilter | number
    subCity?: StringFilter | string
    woredaOrSpecificPlace?: StringFilter | string
    propertyType?: StringFilter | string
    numberOfBedrooms?: IntFilter | number
    numberOfBathrooms?: IntFilter | number
    housePostType?: EnumHousePostTypeFilter | HousePostType
    price?: FloatFilter | number
    area?: StringFilter | string
    status?: EnumStatusFilter | Status
    userTelegramID?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type HouseRequestUpsertWithWhereUniqueWithoutUserInput = {
    where: HouseRequestWhereUniqueInput
    update: XOR<HouseRequestUpdateWithoutUserInput, HouseRequestUncheckedUpdateWithoutUserInput>
    create: XOR<HouseRequestCreateWithoutUserInput, HouseRequestUncheckedCreateWithoutUserInput>
  }

  export type HouseRequestUpdateWithWhereUniqueWithoutUserInput = {
    where: HouseRequestWhereUniqueInput
    data: XOR<HouseRequestUpdateWithoutUserInput, HouseRequestUncheckedUpdateWithoutUserInput>
  }

  export type HouseRequestUpdateManyWithWhereWithoutUserInput = {
    where: HouseRequestScalarWhereInput
    data: XOR<HouseRequestUpdateManyMutationInput, HouseRequestUncheckedUpdateManyWithoutHouseRequestsInput>
  }

  export type HouseRequestScalarWhereInput = {
    AND?: Enumerable<HouseRequestScalarWhereInput>
    OR?: Enumerable<HouseRequestScalarWhereInput>
    NOT?: Enumerable<HouseRequestScalarWhereInput>
    id?: IntFilter | number
    subCity?: StringFilter | string
    propertyType?: StringFilter | string
    numberOfBedrooms?: IntFilter | number
    houseRequestType?: EnumHouseRequestTypeFilter | HouseRequestType
    userTelegramID?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type HouseImageCreateWithoutHouseInput = {
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HouseImageUncheckedCreateWithoutHouseInput = {
    id?: number
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HouseImageCreateOrConnectWithoutHouseInput = {
    where: HouseImageWhereUniqueInput
    create: XOR<HouseImageCreateWithoutHouseInput, HouseImageUncheckedCreateWithoutHouseInput>
  }

  export type HouseImageCreateManyHouseInputEnvelope = {
    data: Enumerable<HouseImageCreateManyHouseInput>
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutHousesInput = {
    telegramId: string
    telegramFirstName?: string | null
    telegramLastName?: string | null
    fullName?: string | null
    language?: Language
    phoneNumber?: string | null
    userName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    houseRequests?: HouseRequestCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutHousesInput = {
    telegramId: string
    telegramFirstName?: string | null
    telegramLastName?: string | null
    fullName?: string | null
    language?: Language
    phoneNumber?: string | null
    userName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    houseRequests?: HouseRequestUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutHousesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutHousesInput, UserUncheckedCreateWithoutHousesInput>
  }

  export type HouseImageUpsertWithWhereUniqueWithoutHouseInput = {
    where: HouseImageWhereUniqueInput
    update: XOR<HouseImageUpdateWithoutHouseInput, HouseImageUncheckedUpdateWithoutHouseInput>
    create: XOR<HouseImageCreateWithoutHouseInput, HouseImageUncheckedCreateWithoutHouseInput>
  }

  export type HouseImageUpdateWithWhereUniqueWithoutHouseInput = {
    where: HouseImageWhereUniqueInput
    data: XOR<HouseImageUpdateWithoutHouseInput, HouseImageUncheckedUpdateWithoutHouseInput>
  }

  export type HouseImageUpdateManyWithWhereWithoutHouseInput = {
    where: HouseImageScalarWhereInput
    data: XOR<HouseImageUpdateManyMutationInput, HouseImageUncheckedUpdateManyWithoutHouseImagesInput>
  }

  export type HouseImageScalarWhereInput = {
    AND?: Enumerable<HouseImageScalarWhereInput>
    OR?: Enumerable<HouseImageScalarWhereInput>
    NOT?: Enumerable<HouseImageScalarWhereInput>
    id?: IntFilter | number
    image?: StringFilter | string
    houseId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type UserUpsertWithoutHousesInput = {
    update: XOR<UserUpdateWithoutHousesInput, UserUncheckedUpdateWithoutHousesInput>
    create: XOR<UserCreateWithoutHousesInput, UserUncheckedCreateWithoutHousesInput>
  }

  export type UserUpdateWithoutHousesInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    telegramFirstName?: NullableStringFieldUpdateOperationsInput | string | null
    telegramLastName?: NullableStringFieldUpdateOperationsInput | string | null
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    language?: EnumLanguageFieldUpdateOperationsInput | Language
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    userName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    houseRequests?: HouseRequestUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutHousesInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    telegramFirstName?: NullableStringFieldUpdateOperationsInput | string | null
    telegramLastName?: NullableStringFieldUpdateOperationsInput | string | null
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    language?: EnumLanguageFieldUpdateOperationsInput | Language
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    userName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    houseRequests?: HouseRequestUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutHouseRequestsInput = {
    telegramId: string
    telegramFirstName?: string | null
    telegramLastName?: string | null
    fullName?: string | null
    language?: Language
    phoneNumber?: string | null
    userName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    houses?: HouseCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutHouseRequestsInput = {
    telegramId: string
    telegramFirstName?: string | null
    telegramLastName?: string | null
    fullName?: string | null
    language?: Language
    phoneNumber?: string | null
    userName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    houses?: HouseUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutHouseRequestsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutHouseRequestsInput, UserUncheckedCreateWithoutHouseRequestsInput>
  }

  export type UserUpsertWithoutHouseRequestsInput = {
    update: XOR<UserUpdateWithoutHouseRequestsInput, UserUncheckedUpdateWithoutHouseRequestsInput>
    create: XOR<UserCreateWithoutHouseRequestsInput, UserUncheckedCreateWithoutHouseRequestsInput>
  }

  export type UserUpdateWithoutHouseRequestsInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    telegramFirstName?: NullableStringFieldUpdateOperationsInput | string | null
    telegramLastName?: NullableStringFieldUpdateOperationsInput | string | null
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    language?: EnumLanguageFieldUpdateOperationsInput | Language
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    userName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    houses?: HouseUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutHouseRequestsInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    telegramFirstName?: NullableStringFieldUpdateOperationsInput | string | null
    telegramLastName?: NullableStringFieldUpdateOperationsInput | string | null
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    language?: EnumLanguageFieldUpdateOperationsInput | Language
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    userName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    houses?: HouseUncheckedUpdateManyWithoutUserNestedInput
  }

  export type HouseCreateWithoutHouseImagesInput = {
    subCity: string
    woredaOrSpecificPlace: string
    propertyType: string
    numberOfBedrooms: number
    numberOfBathrooms: number
    housePostType: HousePostType
    price: number
    area: string
    status?: Status
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutHousesInput
  }

  export type HouseUncheckedCreateWithoutHouseImagesInput = {
    id?: number
    subCity: string
    woredaOrSpecificPlace: string
    propertyType: string
    numberOfBedrooms: number
    numberOfBathrooms: number
    housePostType: HousePostType
    price: number
    area: string
    status?: Status
    userTelegramID: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HouseCreateOrConnectWithoutHouseImagesInput = {
    where: HouseWhereUniqueInput
    create: XOR<HouseCreateWithoutHouseImagesInput, HouseUncheckedCreateWithoutHouseImagesInput>
  }

  export type HouseUpsertWithoutHouseImagesInput = {
    update: XOR<HouseUpdateWithoutHouseImagesInput, HouseUncheckedUpdateWithoutHouseImagesInput>
    create: XOR<HouseCreateWithoutHouseImagesInput, HouseUncheckedCreateWithoutHouseImagesInput>
  }

  export type HouseUpdateWithoutHouseImagesInput = {
    subCity?: StringFieldUpdateOperationsInput | string
    woredaOrSpecificPlace?: StringFieldUpdateOperationsInput | string
    propertyType?: StringFieldUpdateOperationsInput | string
    numberOfBedrooms?: IntFieldUpdateOperationsInput | number
    numberOfBathrooms?: IntFieldUpdateOperationsInput | number
    housePostType?: EnumHousePostTypeFieldUpdateOperationsInput | HousePostType
    price?: FloatFieldUpdateOperationsInput | number
    area?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutHousesNestedInput
  }

  export type HouseUncheckedUpdateWithoutHouseImagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    subCity?: StringFieldUpdateOperationsInput | string
    woredaOrSpecificPlace?: StringFieldUpdateOperationsInput | string
    propertyType?: StringFieldUpdateOperationsInput | string
    numberOfBedrooms?: IntFieldUpdateOperationsInput | number
    numberOfBathrooms?: IntFieldUpdateOperationsInput | number
    housePostType?: EnumHousePostTypeFieldUpdateOperationsInput | HousePostType
    price?: FloatFieldUpdateOperationsInput | number
    area?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | Status
    userTelegramID?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HouseCreateManyUserInput = {
    id?: number
    subCity: string
    woredaOrSpecificPlace: string
    propertyType: string
    numberOfBedrooms: number
    numberOfBathrooms: number
    housePostType: HousePostType
    price: number
    area: string
    status?: Status
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HouseRequestCreateManyUserInput = {
    id?: number
    subCity: string
    propertyType: string
    numberOfBedrooms: number
    houseRequestType: HouseRequestType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HouseUpdateWithoutUserInput = {
    subCity?: StringFieldUpdateOperationsInput | string
    woredaOrSpecificPlace?: StringFieldUpdateOperationsInput | string
    propertyType?: StringFieldUpdateOperationsInput | string
    numberOfBedrooms?: IntFieldUpdateOperationsInput | number
    numberOfBathrooms?: IntFieldUpdateOperationsInput | number
    housePostType?: EnumHousePostTypeFieldUpdateOperationsInput | HousePostType
    price?: FloatFieldUpdateOperationsInput | number
    area?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    houseImages?: HouseImageUpdateManyWithoutHouseNestedInput
  }

  export type HouseUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    subCity?: StringFieldUpdateOperationsInput | string
    woredaOrSpecificPlace?: StringFieldUpdateOperationsInput | string
    propertyType?: StringFieldUpdateOperationsInput | string
    numberOfBedrooms?: IntFieldUpdateOperationsInput | number
    numberOfBathrooms?: IntFieldUpdateOperationsInput | number
    housePostType?: EnumHousePostTypeFieldUpdateOperationsInput | HousePostType
    price?: FloatFieldUpdateOperationsInput | number
    area?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    houseImages?: HouseImageUncheckedUpdateManyWithoutHouseNestedInput
  }

  export type HouseUncheckedUpdateManyWithoutHousesInput = {
    id?: IntFieldUpdateOperationsInput | number
    subCity?: StringFieldUpdateOperationsInput | string
    woredaOrSpecificPlace?: StringFieldUpdateOperationsInput | string
    propertyType?: StringFieldUpdateOperationsInput | string
    numberOfBedrooms?: IntFieldUpdateOperationsInput | number
    numberOfBathrooms?: IntFieldUpdateOperationsInput | number
    housePostType?: EnumHousePostTypeFieldUpdateOperationsInput | HousePostType
    price?: FloatFieldUpdateOperationsInput | number
    area?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HouseRequestUpdateWithoutUserInput = {
    subCity?: StringFieldUpdateOperationsInput | string
    propertyType?: StringFieldUpdateOperationsInput | string
    numberOfBedrooms?: IntFieldUpdateOperationsInput | number
    houseRequestType?: EnumHouseRequestTypeFieldUpdateOperationsInput | HouseRequestType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HouseRequestUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    subCity?: StringFieldUpdateOperationsInput | string
    propertyType?: StringFieldUpdateOperationsInput | string
    numberOfBedrooms?: IntFieldUpdateOperationsInput | number
    houseRequestType?: EnumHouseRequestTypeFieldUpdateOperationsInput | HouseRequestType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HouseRequestUncheckedUpdateManyWithoutHouseRequestsInput = {
    id?: IntFieldUpdateOperationsInput | number
    subCity?: StringFieldUpdateOperationsInput | string
    propertyType?: StringFieldUpdateOperationsInput | string
    numberOfBedrooms?: IntFieldUpdateOperationsInput | number
    houseRequestType?: EnumHouseRequestTypeFieldUpdateOperationsInput | HouseRequestType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HouseImageCreateManyHouseInput = {
    id?: number
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HouseImageUpdateWithoutHouseInput = {
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HouseImageUncheckedUpdateWithoutHouseInput = {
    id?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HouseImageUncheckedUpdateManyWithoutHouseImagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}